var search_data = {"index":{"searchIndex":["celluloid","aborterror","abstractproxy","actor","sleeper","actorproxy","asynccall","asyncproxy","blockcall","blockproxy","blockresponse","cpucounter","rbconfig","call","callchain","classmethods","condition","waiter","conditionerror","deadactorerror","deadtaskerror","errorresponse","eventedmailbox","exitevent","fsm","classmethods","state","unattachederror","fiberstackerror","future","result","futureproxy","incident","incidentlogger","severity","incidentreporter","formatter","instancemethods","internalpool","linkingrequest","linkingresponse","links","logevent","logger","mailbox","mailboxdead","mailboxshutdown","method","namingrequest","notactorerror","nottaskerror","notifications","fanout","subscriber","poolmanager","properties","receiver","receivers","registry","response","resumableerror","ringbuffer","signalconditionrequest","signals","stackdump","actorstate","displaybacktrace","taskstate","threadstate","successresponse","supervisiongroup","member","supervisor","synccall","syncproxy","systemevent","task","terminatederror","timeouterror","taskfiber","taskset","taskthread","terminationrequest","thread","threadhandle","timeouterror","uuid","fiber","thread","org","jruby","ext","fiber","threadfiber","<<()","<<()","<<()","<<()","<<()","<<()","<<()","<=>()","===()","[]()","[]=()","__class__()","__class__()","__class__()","__class__()","__class__()","__crash_handler__()","__provision_worker__()","__shutdown__()","_send_()","_send_()","active?()","actor()","actor=()","actor?()","actor_options()","actors()","add()","add()","after()","alive?()","alive?()","alive?()","alive?()","all()","arity()","assert_inactive()","assert_running()","async()","async()","attach()","backtrace()","backtrace()","backtrace()","bare_object()","before_suspend()","blocks()","boot()","broadcast()","broadcast()","busy_size()","busy_size()","call()","call()","call()","call()","call()","call()","call()","call_chain_id()","celluloid?()","celluloid?()","clean_thread_locals()","cleanup()","cleanup()","clear()","clear()","clear()","clear_registry()","cores()","cores()","crash()","create()","create()","create()","create()","create_incident()","current()","current()","current_id()","current_id=()","current_state()","current_state_name()","debug()","debug()","default_state()","default_state()","delete()","delete()","delete()","deliver()","deliver()","deprecate()","detect_recursion()","dispatch()","dispatch()","dispatch()","dispatch()","dispatch()","dispatch()","display_backtrace()","dump()","dump()","dump()","each()","each()","each()","empty?()","empty?()","error()","error()","every()","exception_handler()","exception_handler()","exclusive()","exclusive()","exclusive?()","execute_block_on_receiver()","fatal()","finalize()","fire_timers()","first()","flush()","flush()","format_exception()","full?()","future()","future()","generate()","get()","get()","guard()","handle_crash()","handle_delayed_transitions()","handle_exit_event()","handle_message()","handle_message()","handle_system_event()","idle_size()","idle_size()","incident_topic()","include?()","included()","included()","info()","info()","init()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","is_a?()","join()","join()","kill()","kill()","kill()","kind_of?()","leaked?()","link()","linked_to?()","linking_request()","listeners_for()","listening?()","log()","mailbox()","mailbox()","mailbox()","match()","matches?()","merge()","method()","method_missing()","method_missing()","method_missing()","method_missing()","methods()","monitor()","monitoring?()","name()","name()","names()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_link()","next_message()","next_message()","notifier()","pool()","pool()","pool_link()","process()","property()","prune()","publish()","publish()","publish()","push()","put()","ready?()","receive()","receive()","receive()","receive()","receive()","register_shutdown()","registered()","report()","respond()","respond_to?()","respond_to?()","restart()","restart_actor()","resume()","resume()","role()","role=()","run()","run()","run()","run!()","run_finalizer()","running?()","running?()","running?()","set()","setup_thread()","severity_to_string()","shift()","shutdown()","shutdown()","shutdown()","shutdown()","shutdown()","signal()","signal()","signal()","signal()","signal()","silence()","silenced?()","size()","size()","sleep()","snapshot()","snapshot_actor()","snapshot_thread()","spawn()","spawn_link()","stack_dump()","start()","start()","state()","states()","states()","subscribe()","subscribe()","subscribed_to?()","supervise()","supervise()","supervise()","supervise_as()","supervise_as()","supervise_as()","suspend()","suspend()","suspend()","tap()","task()","task()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate!()","timeout()","timeout_interval()","to_a()","to_a()","to_a()","to_proc()","to_s()","trace()","transition()","transition!()","transition_with_callbacks!()","unknown()","unlink()","unmonitor()","unsilence()","unsubscribe()","unsubscribe()","uuid()","valid_transition?()","validate_and_sanitize_new_state()","value()","value()","value()","value()","version()","wait()","wait()","wait()","wait()","wait()","wait()","wait_interval()","warn()","warn()","wrapped_object()"],"longSearchIndex":["celluloid","celluloid::aborterror","celluloid::abstractproxy","celluloid::actor","celluloid::actor::sleeper","celluloid::actorproxy","celluloid::asynccall","celluloid::asyncproxy","celluloid::blockcall","celluloid::blockproxy","celluloid::blockresponse","celluloid::cpucounter","celluloid::cpucounter::rbconfig","celluloid::call","celluloid::callchain","celluloid::classmethods","celluloid::condition","celluloid::condition::waiter","celluloid::conditionerror","celluloid::deadactorerror","celluloid::deadtaskerror","celluloid::errorresponse","celluloid::eventedmailbox","celluloid::exitevent","celluloid::fsm","celluloid::fsm::classmethods","celluloid::fsm::state","celluloid::fsm::unattachederror","celluloid::fiberstackerror","celluloid::future","celluloid::future::result","celluloid::futureproxy","celluloid::incident","celluloid::incidentlogger","celluloid::incidentlogger::severity","celluloid::incidentreporter","celluloid::incidentreporter::formatter","celluloid::instancemethods","celluloid::internalpool","celluloid::linkingrequest","celluloid::linkingresponse","celluloid::links","celluloid::logevent","celluloid::logger","celluloid::mailbox","celluloid::mailboxdead","celluloid::mailboxshutdown","celluloid::method","celluloid::namingrequest","celluloid::notactorerror","celluloid::nottaskerror","celluloid::notifications","celluloid::notifications::fanout","celluloid::notifications::subscriber","celluloid::poolmanager","celluloid::properties","celluloid::receiver","celluloid::receivers","celluloid::registry","celluloid::response","celluloid::resumableerror","celluloid::ringbuffer","celluloid::signalconditionrequest","celluloid::signals","celluloid::stackdump","celluloid::stackdump::actorstate","celluloid::stackdump::displaybacktrace","celluloid::stackdump::taskstate","celluloid::stackdump::threadstate","celluloid::successresponse","celluloid::supervisiongroup","celluloid::supervisiongroup::member","celluloid::supervisor","celluloid::synccall","celluloid::syncproxy","celluloid::systemevent","celluloid::task","celluloid::task::terminatederror","celluloid::task::timeouterror","celluloid::taskfiber","celluloid::taskset","celluloid::taskthread","celluloid::terminationrequest","celluloid::thread","celluloid::threadhandle","celluloid::timeouterror","celluloid::uuid","fiber","thread","org","org::jruby","org::jruby::ext","org::jruby::ext::fiber","org::jruby::ext::fiber::threadfiber","celluloid::condition::waiter#<<()","celluloid::eventedmailbox#<<()","celluloid::future#<<()","celluloid::links#<<()","celluloid::mailbox#<<()","celluloid::ringbuffer#<<()","celluloid::taskset#<<()","celluloid::logevent#<=>()","celluloid::classmethods#===()","celluloid::registry#[]()","celluloid::registry#[]=()","celluloid::abstractproxy#__class__()","celluloid::actorproxy#__class__()","celluloid::asyncproxy#__class__()","celluloid::futureproxy#__class__()","celluloid::syncproxy#__class__()","celluloid::poolmanager#__crash_handler__()","celluloid::poolmanager#__provision_worker__()","celluloid::poolmanager#__shutdown__()","celluloid::actorproxy#_send_()","celluloid::poolmanager#_send_()","celluloid::internalpool#active?()","celluloid::thread#actor()","celluloid::fsm#actor=()","celluloid#actor?()","celluloid::classmethods#actor_options()","celluloid::supervisiongroup#actors()","celluloid::incidentlogger#add()","celluloid::supervisiongroup#add()","celluloid::actor#after()","celluloid::actorproxy#alive?()","celluloid::mailbox#alive?()","celluloid::threadhandle#alive?()","fiber#alive?()","celluloid::actor#all()","celluloid::method#arity()","celluloid::internalpool#assert_inactive()","celluloid::internalpool#assert_running()","celluloid::actor#async()","celluloid::actorproxy#async()","celluloid::fsm#attach()","celluloid::task#backtrace()","celluloid::taskthread#backtrace()","celluloid::threadhandle#backtrace()","celluloid::instancemethods#bare_object()","celluloid::actor::sleeper#before_suspend()","celluloid::supervisiongroup#blocks()","celluloid#boot()","celluloid::condition#broadcast()","celluloid::signals#broadcast()","celluloid::internalpool#busy_size()","celluloid::poolmanager#busy_size()","celluloid::actor#call()","celluloid::blockcall#call()","celluloid::fsm::state#call()","celluloid::future#call()","celluloid::incidentreporter::formatter#call()","celluloid::method#call()","celluloid::signalconditionrequest#call()","celluloid::thread#call_chain_id()","celluloid::thread#celluloid?()","thread#celluloid?()","celluloid::internalpool#clean_thread_locals()","celluloid::actor#cleanup()","celluloid::synccall#cleanup()","celluloid::incidentlogger#clear()","celluloid::registry#clear()","celluloid::ringbuffer#clear()","celluloid::actor#clear_registry()","celluloid#cores()","celluloid::cpucounter::cores()","celluloid::logger#crash()","celluloid::internalpool#create()","celluloid::task#create()","celluloid::taskfiber#create()","celluloid::taskthread#create()","celluloid::incidentlogger#create_incident()","celluloid::actor#current()","celluloid::task::current()","celluloid::callchain::current_id()","celluloid::callchain::current_id=()","celluloid::fsm#current_state()","celluloid::fsm#current_state_name()","celluloid::incidentlogger#debug()","celluloid::logger#debug()","celluloid::fsm#default_state()","celluloid::fsm::classmethods#default_state()","celluloid::links#delete()","celluloid::registry#delete()","celluloid::taskset#delete()","celluloid::taskfiber#deliver()","celluloid::taskthread#deliver()","celluloid::logger#deprecate()","celluloid#detect_recursion()","celluloid::asynccall#dispatch()","celluloid::blockcall#dispatch()","celluloid::blockresponse#dispatch()","celluloid::call#dispatch()","celluloid::response#dispatch()","celluloid::synccall#dispatch()","celluloid::stackdump::displaybacktrace#display_backtrace()","celluloid::stackdump#dump()","celluloid::stackdump::actorstate#dump()","celluloid::stackdump::threadstate#dump()","celluloid::internalpool#each()","celluloid::links#each()","celluloid::mailbox#each()","celluloid::ringbuffer#empty?()","celluloid::taskset#empty?()","celluloid::incidentlogger#error()","celluloid::logger#error()","celluloid::actor#every()","celluloid#exception_handler()","celluloid::logger#exception_handler()","celluloid::classmethods#exclusive()","celluloid::task#exclusive()","celluloid::task#exclusive?()","celluloid::call#execute_block_on_receiver()","celluloid::incidentlogger#fatal()","celluloid::supervisiongroup#finalize()","celluloid::receivers#fire_timers()","celluloid::taskset#first()","celluloid::incidentlogger#flush()","celluloid::ringbuffer#flush()","celluloid::logger#format_exception()","celluloid::ringbuffer#full?()","celluloid::actor#future()","celluloid::actorproxy#future()","celluloid::uuid::generate()","celluloid::internalpool#get()","celluloid::registry#get()","celluloid::task#guard()","celluloid::actor#handle_crash()","celluloid::fsm#handle_delayed_transitions()","celluloid::actor#handle_exit_event()","celluloid::actor#handle_message()","celluloid::receivers#handle_message()","celluloid::actor#handle_system_event()","celluloid::internalpool#idle_size()","celluloid::poolmanager#idle_size()","celluloid::incidentlogger#incident_topic()","celluloid::links#include?()","celluloid#included()","celluloid::fsm::included()","celluloid::incidentlogger#info()","celluloid::logger#info()","celluloid#init()","celluloid::actorproxy#inspect()","celluloid::asyncproxy#inspect()","celluloid::futureproxy#inspect()","celluloid::instancemethods#inspect()","celluloid::links#inspect()","celluloid::mailbox#inspect()","celluloid::method#inspect()","celluloid::poolmanager#inspect()","celluloid::syncproxy#inspect()","celluloid::task#inspect()","celluloid::poolmanager#is_a?()","celluloid::actor#join()","celluloid::threadhandle#join()","celluloid::actor#kill()","celluloid::internalpool#kill()","celluloid::threadhandle#kill()","celluloid::poolmanager#kind_of?()","celluloid::instancemethods#leaked?()","celluloid::actor#link()","celluloid::actor#linked_to?()","celluloid::actor#linking_request()","celluloid::notifications::fanout#listeners_for()","celluloid::notifications::fanout#listening?()","celluloid::incidentlogger#log()","celluloid#mailbox()","celluloid::thread#mailbox()","thread::mailbox()","celluloid::receiver#match()","celluloid::notifications::subscriber#matches?()","celluloid::incident#merge()","celluloid::actorproxy#method()","celluloid::asyncproxy#method_missing()","celluloid::futureproxy#method_missing()","celluloid::poolmanager#method_missing()","celluloid::syncproxy#method_missing()","celluloid::poolmanager#methods()","celluloid::actor#monitor()","celluloid::actor#monitoring?()","celluloid::instancemethods#name()","celluloid::poolmanager#name()","celluloid::registry#names()","celluloid::aborterror::new()","celluloid::actor::new()","celluloid::actor::sleeper::new()","celluloid::actorproxy::new()","celluloid::asyncproxy::new()","celluloid::blockcall::new()","celluloid::blockproxy::new()","celluloid::blockresponse::new()","celluloid::call::new()","celluloid::classmethods#new()","celluloid::condition::new()","celluloid::condition::waiter::new()","celluloid::eventedmailbox::new()","celluloid::exitevent::new()","celluloid::fsm::new()","celluloid::fsm::state::new()","celluloid::future::new()","celluloid::future::new()","celluloid::future::result::new()","celluloid::futureproxy::new()","celluloid::incident::new()","celluloid::incidentlogger::new()","celluloid::incidentreporter::new()","celluloid::internalpool::new()","celluloid::linkingrequest::new()","celluloid::linkingresponse::new()","celluloid::links::new()","celluloid::logevent::new()","celluloid::mailbox::new()","celluloid::method::new()","celluloid::namingrequest::new()","celluloid::notifications::fanout::new()","celluloid::notifications::subscriber::new()","celluloid::poolmanager::new()","celluloid::receiver::new()","celluloid::receivers::new()","celluloid::registry::new()","celluloid::response::new()","celluloid::ringbuffer::new()","celluloid::signalconditionrequest::new()","celluloid::signals::new()","celluloid::stackdump::new()","celluloid::supervisiongroup::new()","celluloid::supervisiongroup::member::new()","celluloid::synccall::new()","celluloid::syncproxy::new()","celluloid::task::new()","celluloid::taskset::new()","celluloid::taskthread::new()","celluloid::threadhandle::new()","celluloid::classmethods#new_link()","celluloid::eventedmailbox#next_message()","celluloid::mailbox#next_message()","celluloid::notifications::notifier()","celluloid::classmethods#pool()","celluloid::supervisiongroup#pool()","celluloid::classmethods#pool_link()","celluloid::linkingrequest#process()","celluloid::properties#property()","celluloid::notifications::fanout#prune()","celluloid::notifications#publish()","celluloid::notifications::fanout#publish()","celluloid::notifications::subscriber#publish()","celluloid::ringbuffer#push()","celluloid::internalpool#put()","celluloid::future#ready?()","celluloid::actor#receive()","celluloid::eventedmailbox#receive()","celluloid::mailbox#receive()","celluloid::receivers#receive()","thread::receive()","celluloid#register_shutdown()","celluloid::actor#registered()","celluloid::incidentreporter#report()","celluloid::synccall#respond()","celluloid::poolmanager#respond_to?()","celluloid::syncproxy#respond_to?()","celluloid::supervisiongroup::member#restart()","celluloid::supervisiongroup#restart_actor()","celluloid::receiver#resume()","celluloid::task#resume()","celluloid::thread#role()","celluloid::thread#role=()","celluloid::actor#run()","celluloid::classmethods#run()","celluloid::supervisiongroup#run()","celluloid::supervisiongroup#run!()","celluloid::actor#run_finalizer()","celluloid#running?()","celluloid::internalpool#running?()","celluloid::task#running?()","celluloid::registry#set()","celluloid::actor#setup_thread()","celluloid::incidentlogger::severity#severity_to_string()","celluloid::ringbuffer#shift()","celluloid#shutdown()","celluloid::actor#shutdown()","celluloid::eventedmailbox#shutdown()","celluloid::internalpool#shutdown()","celluloid::mailbox#shutdown()","celluloid::actor#signal()","celluloid::condition#signal()","celluloid::future#signal()","celluloid::taskfiber#signal()","celluloid::taskthread#signal()","celluloid::incidentreporter#silence()","celluloid::incidentreporter#silenced?()","celluloid::mailbox#size()","celluloid::poolmanager#size()","celluloid::actor#sleep()","celluloid::stackdump#snapshot()","celluloid::stackdump#snapshot_actor()","celluloid::stackdump#snapshot_thread()","celluloid::classmethods#spawn()","celluloid::classmethods#spawn_link()","celluloid#stack_dump()","celluloid#start()","celluloid::supervisiongroup::member#start()","celluloid::fsm::classmethods#state()","celluloid::fsm#states()","celluloid::fsm::classmethods#states()","celluloid::notifications#subscribe()","celluloid::notifications::fanout#subscribe()","celluloid::notifications::subscriber#subscribed_to?()","celluloid::classmethods#supervise()","celluloid::supervisiongroup#supervise()","celluloid::supervisor#supervise()","celluloid::classmethods#supervise_as()","celluloid::supervisiongroup#supervise_as()","celluloid::supervisor#supervise_as()","celluloid#suspend()","celluloid::task#suspend()","celluloid::task::suspend()","celluloid::instancemethods#tap()","celluloid::actor#task()","celluloid::thread#task()","celluloid::actor#terminate()","celluloid::actorproxy#terminate()","celluloid::supervisiongroup::member#terminate()","celluloid::task#terminate()","celluloid::taskfiber#terminate()","celluloid::actorproxy#terminate!()","celluloid::actor#timeout()","celluloid::actor#timeout_interval()","celluloid::internalpool#to_a()","celluloid::mailbox#to_a()","celluloid::taskset#to_a()","celluloid::blockproxy#to_proc()","celluloid::poolmanager#to_s()","celluloid::incidentlogger#trace()","celluloid::fsm#transition()","celluloid::fsm#transition!()","celluloid::fsm#transition_with_callbacks!()","celluloid::incidentlogger#unknown()","celluloid::actor#unlink()","celluloid::actor#unmonitor()","celluloid::incidentreporter#unsilence()","celluloid::notifications#unsubscribe()","celluloid::notifications::fanout#unsubscribe()","celluloid#uuid()","celluloid::fsm::state#valid_transition?()","celluloid::fsm#validate_and_sanitize_new_state()","celluloid::errorresponse#value()","celluloid::future#value()","celluloid::future::result#value()","celluloid::synccall#value()","celluloid#version()","celluloid::actor#wait()","celluloid::actor::sleeper#wait()","celluloid::condition#wait()","celluloid::condition::waiter#wait()","celluloid::signals#wait()","celluloid::synccall#wait()","celluloid::receivers#wait_interval()","celluloid::incidentlogger#warn()","celluloid::logger#warn()","celluloid::instancemethods#wrapped_object()"],"info":[["Celluloid","","Celluloid.html","",""],["Celluloid::AbortError","","Celluloid/AbortError.html","","<p>The sender made an error, not the current actor\n"],["Celluloid::AbstractProxy","","Celluloid/AbstractProxy.html","","<p>Base class of all Celluloid proxies\n"],["Celluloid::Actor","","Celluloid/Actor.html","","<p>Actors are Celluloid’s concurrency primitive. They’re implemented as normal\nRuby objects wrapped in threads …\n"],["Celluloid::Actor::Sleeper","","Celluloid/Actor/Sleeper.html","",""],["Celluloid::ActorProxy","","Celluloid/ActorProxy.html","","<p>A proxy object returned from Celluloid::Actor.new/new_link which converts\nthe normal Ruby method protocol …\n"],["Celluloid::AsyncCall","","Celluloid/AsyncCall.html","","<p>Asynchronous calls don’t wait for a response\n"],["Celluloid::AsyncProxy","","Celluloid/AsyncProxy.html","","<p>A proxy which sends asynchronous calls to an actor\n"],["Celluloid::BlockCall","","Celluloid/BlockCall.html","",""],["Celluloid::BlockProxy","","Celluloid/BlockProxy.html","",""],["Celluloid::BlockResponse","","Celluloid/BlockResponse.html","",""],["Celluloid::CPUCounter","","Celluloid/CPUCounter.html","",""],["Celluloid::CPUCounter::RbConfig","","Celluloid/CPUCounter/RbConfig.html","",""],["Celluloid::Call","","Celluloid/Call.html","","<p>Calls represent requests to an actor\n"],["Celluloid::CallChain","","Celluloid/CallChain.html","",""],["Celluloid::ClassMethods","","Celluloid/ClassMethods.html","","<p>Class methods added to classes which include Celluloid\n"],["Celluloid::Condition","","Celluloid/Condition.html","","<p>ConditionVariable-like signaling between tasks and threads\n"],["Celluloid::Condition::Waiter","","Celluloid/Condition/Waiter.html","",""],["Celluloid::ConditionError","","Celluloid/ConditionError.html","",""],["Celluloid::DeadActorError","","Celluloid/DeadActorError.html","","<p>Trying to do something to a dead actor\n"],["Celluloid::DeadTaskError","","Celluloid/DeadTaskError.html","","<p>Trying to resume a dead task\n"],["Celluloid::ErrorResponse","","Celluloid/ErrorResponse.html","","<p>Call was aborted due to sender error\n"],["Celluloid::EventedMailbox","","Celluloid/EventedMailbox.html","","<p>An alternative implementation of Celluloid::Mailbox using Reactor\n"],["Celluloid::ExitEvent","","Celluloid/ExitEvent.html","","<p>An actor has exited for the given reason\n"],["Celluloid::FSM","","Celluloid/FSM.html","","<p>Simple finite state machines with integrated Celluloid timeout support\nInspired by Erlang’s gen_fsm ( …\n"],["Celluloid::FSM::ClassMethods","","Celluloid/FSM/ClassMethods.html","",""],["Celluloid::FSM::State","","Celluloid/FSM/State.html","","<p>FSM states as declared by Celluloid::FSM.state\n"],["Celluloid::FSM::UnattachedError","","Celluloid/FSM/UnattachedError.html","",""],["Celluloid::FiberStackError","","Celluloid/FiberStackError.html","",""],["Celluloid::Future","","Celluloid/Future.html","","<p>Celluloid::Future objects allow methods and blocks to run in the\nbackground, their values requested later …\n"],["Celluloid::Future::Result","","Celluloid/Future/Result.html","","<p>Wrapper for result values to distinguish them in mailboxes\n"],["Celluloid::FutureProxy","","Celluloid/FutureProxy.html","","<p>A proxy which creates future calls to an actor\n"],["Celluloid::Incident","","Celluloid/Incident.html","","<p>Wraps all events and context for a single incident.\n"],["Celluloid::IncidentLogger","","Celluloid/IncidentLogger.html","","<p>A logger that holds all messages in circular buffers, then flushes the\nbuffers when an event occurs at …\n"],["Celluloid::IncidentLogger::Severity","","Celluloid/IncidentLogger/Severity.html","",""],["Celluloid::IncidentReporter","","Celluloid/IncidentReporter.html","","<p>Subscribes to log incident topics to report on them.\n"],["Celluloid::IncidentReporter::Formatter","","Celluloid/IncidentReporter/Formatter.html","","<p>get the time from the event\n"],["Celluloid::InstanceMethods","","Celluloid/InstanceMethods.html","","<p>These are methods we don’t want added to the Celluloid singleton but to be\ndefined on all classes that …\n"],["Celluloid::InternalPool","","Celluloid/InternalPool.html","","<p>Maintain a thread pool FOR SPEED!!\n"],["Celluloid::LinkingRequest","","Celluloid/LinkingRequest.html","","<p>Request to link with another actor\n"],["Celluloid::LinkingResponse","","Celluloid/LinkingResponse.html","","<p>Response to a link request\n"],["Celluloid::Links","","Celluloid/Links.html","","<p>Linked actors send each other system events\n"],["Celluloid::LogEvent","","Celluloid/LogEvent.html","","<p>Wraps a single log event.\n"],["Celluloid::Logger","","Celluloid/Logger.html","",""],["Celluloid::Mailbox","","Celluloid/Mailbox.html","","<p>Actors communicate with asynchronous messages. Messages are buffered in\nMailboxes until Actors can act …\n"],["Celluloid::MailboxDead","","Celluloid/MailboxDead.html","",""],["Celluloid::MailboxShutdown","","Celluloid/MailboxShutdown.html","",""],["Celluloid::Method","","Celluloid/Method.html","","<p>Method handles that route through an actor proxy\n"],["Celluloid::NamingRequest","","Celluloid/NamingRequest.html","","<p>Name an actor at the time it’s registered\n"],["Celluloid::NotActorError","","Celluloid/NotActorError.html","","<p>Don’t do Actor-like things outside Actor scope\n"],["Celluloid::NotTaskError","","Celluloid/NotTaskError.html","","<p>Asked to do task-related things outside a task\n"],["Celluloid::Notifications","","Celluloid/Notifications.html","",""],["Celluloid::Notifications::Fanout","","Celluloid/Notifications/Fanout.html","",""],["Celluloid::Notifications::Subscriber","","Celluloid/Notifications/Subscriber.html","",""],["Celluloid::PoolManager","","Celluloid/PoolManager.html","","<p>Manages a fixed-size pool of workers Delegates work (i.e. methods) and\nsupervises workers Don’t use this …\n"],["Celluloid::Properties","","Celluloid/Properties.html","","<p>Properties define inheritable attributes of classes, somewhat similar to\nRails cattr_*/mattr_* or class_attribute …\n"],["Celluloid::Receiver","","Celluloid/Receiver.html","","<p>Methods blocking on a call to receive\n"],["Celluloid::Receivers","","Celluloid/Receivers.html","","<p>Allow methods to directly interact with the actor protocol\n"],["Celluloid::Registry","","Celluloid/Registry.html","","<p>The Registry allows us to refer to specific actors by human-meaningful\nnames\n"],["Celluloid::Response","","Celluloid/Response.html","","<p>Responses to calls\n"],["Celluloid::ResumableError","","Celluloid/ResumableError.html","","<p>Errors which should be resumed automatically\n"],["Celluloid::RingBuffer","","Celluloid/RingBuffer.html","",""],["Celluloid::SignalConditionRequest","","Celluloid/SignalConditionRequest.html","","<p>Signal a condition\n"],["Celluloid::Signals","","Celluloid/Signals.html","","<p>Event signaling between methods of the same object\n"],["Celluloid::StackDump","","Celluloid/StackDump.html","",""],["Celluloid::StackDump::ActorState","","Celluloid/StackDump/ActorState.html","",""],["Celluloid::StackDump::DisplayBacktrace","","Celluloid/StackDump/DisplayBacktrace.html","",""],["Celluloid::StackDump::TaskState","","Celluloid/StackDump/TaskState.html","",""],["Celluloid::StackDump::ThreadState","","Celluloid/StackDump/ThreadState.html","",""],["Celluloid::SuccessResponse","","Celluloid/SuccessResponse.html","","<p>Call completed successfully\n"],["Celluloid::SupervisionGroup","","Celluloid/SupervisionGroup.html","","<p>Supervise collections of actors as a group\n"],["Celluloid::SupervisionGroup::Member","","Celluloid/SupervisionGroup/Member.html","","<p>A member of the group\n"],["Celluloid::Supervisor","","Celluloid/Supervisor.html","","<p>Supervisors are actors that watch over other actors and restart them if\nthey crash\n"],["Celluloid::SyncCall","","Celluloid/SyncCall.html","","<p>Synchronous calls wait for a response\n"],["Celluloid::SyncProxy","","Celluloid/SyncProxy.html","","<p>A proxy which sends synchronous calls to an actor\n"],["Celluloid::SystemEvent","","Celluloid/SystemEvent.html","","<p>High-priority internal system events\n"],["Celluloid::Task","","Celluloid/Task.html","","<p>Tasks are interruptable/resumable execution contexts used to run methods\n"],["Celluloid::Task::TerminatedError","","Celluloid/Task/TerminatedError.html","",""],["Celluloid::Task::TimeoutError","","Celluloid/Task/TimeoutError.html","",""],["Celluloid::TaskFiber","","Celluloid/TaskFiber.html","","<p>Tasks with a Fiber backend\n"],["Celluloid::TaskSet","","Celluloid/TaskSet.html","",""],["Celluloid::TaskThread","","Celluloid/TaskThread.html","","<p>Tasks with a Thread backend\n"],["Celluloid::TerminationRequest","","Celluloid/TerminationRequest.html","","<p>Request for an actor to terminate\n"],["Celluloid::Thread","","Celluloid/Thread.html","",""],["Celluloid::ThreadHandle","","Celluloid/ThreadHandle.html","","<p>An abstraction around threads from the InternalPool which ensures we don’t\naccidentally do things to …\n"],["Celluloid::TimeoutError","","Celluloid/TimeoutError.html","","<p>A timeout occured before the given request could complete\n"],["Celluloid::UUID","","Celluloid/UUID.html","","<p>Clearly Ruby doesn’t have enough UUID libraries This one aims to be fast\nand simple with good support …\n"],["Fiber","","Fiber.html","",""],["Thread","","Thread.html","",""],["org","","org.html","",""],["org::jruby","","org/jruby.html","",""],["org::jruby::ext","","org/jruby/ext.html","",""],["org::jruby::ext::fiber","","org/jruby/ext/fiber.html","",""],["org::jruby::ext::fiber::ThreadFiber","","org/jruby/ext/fiber/ThreadFiber.html","",""],["<<","Celluloid::Condition::Waiter","Celluloid/Condition/Waiter.html#method-i-3C-3C","(message)",""],["<<","Celluloid::EventedMailbox","Celluloid/EventedMailbox.html#method-i-3C-3C","(message)","<p>Add a message to the Mailbox\n"],["<<","Celluloid::Future","Celluloid/Future.html#method-i-3C-3C","(value)",""],["<<","Celluloid::Links","Celluloid/Links.html#method-i-3C-3C","(actor)","<p>Add an actor to the current links\n"],["<<","Celluloid::Mailbox","Celluloid/Mailbox.html#method-i-3C-3C","(message)","<p>Add a message to the Mailbox\n"],["<<","Celluloid::RingBuffer","Celluloid/RingBuffer.html#method-i-3C-3C","(value)",""],["<<","Celluloid::TaskSet","Celluloid/TaskSet.html#method-i-3C-3C","(task)",""],["<=>","Celluloid::LogEvent","Celluloid/LogEvent.html#method-i-3C-3D-3E","(other)",""],["===","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-3D-3D-3D","(other)",""],["[]","Celluloid::Registry","Celluloid/Registry.html#method-i-5B-5D","(name)","<p>Retrieve an actor by name\n"],["[]=","Celluloid::Registry","Celluloid/Registry.html#method-i-5B-5D-3D","(name, actor)","<p>Register an Actor\n"],["__class__","Celluloid::AbstractProxy","Celluloid/AbstractProxy.html#method-i-__class__","()","<p>Used for reflecting on proxy objects themselves\n"],["__class__","Celluloid::ActorProxy","Celluloid/ActorProxy.html#method-i-__class__","()","<p>Used for reflecting on proxy objects themselves\n"],["__class__","Celluloid::AsyncProxy","Celluloid/AsyncProxy.html#method-i-__class__","()","<p>Used for reflecting on proxy objects themselves\n"],["__class__","Celluloid::FutureProxy","Celluloid/FutureProxy.html#method-i-__class__","()","<p>Used for reflecting on proxy objects themselves\n"],["__class__","Celluloid::SyncProxy","Celluloid/SyncProxy.html#method-i-__class__","()","<p>Used for reflecting on proxy objects themselves\n"],["__crash_handler__","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-__crash_handler__","(actor, reason)","<p>Spawn a new worker for every crashed one\n"],["__provision_worker__","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-__provision_worker__","()","<p>Provision a new worker\n"],["__shutdown__","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-__shutdown__","()",""],["_send_","Celluloid::ActorProxy","Celluloid/ActorProxy.html#method-i-_send_","(meth, *args, &block)",""],["_send_","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-_send_","(method, *args, &block)",""],["active?","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-active-3F","()",""],["actor","Celluloid::Thread","Celluloid/Thread.html#method-i-actor","()","<p>Obtain the Celluloid::Actor object for this thread\n"],["actor=","Celluloid::FSM","Celluloid/FSM.html#method-i-actor-3D","(actor)",""],["actor?","Celluloid","Celluloid.html#method-i-actor-3F","()","<p>Are we currently inside of an actor?\n"],["actor_options","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-actor_options","()","<p>Configuration options for Actor#new\n"],["actors","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-i-actors","()",""],["add","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-add","(severity, message=nil, progname=nil, &block)","<p>add an event.\n"],["add","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-i-add","(klass, options)",""],["after","Celluloid::Actor","Celluloid/Actor.html#method-i-after","(interval, &block)","<p>Schedule a block to run at the given time\n"],["alive?","Celluloid::ActorProxy","Celluloid/ActorProxy.html#method-i-alive-3F","()",""],["alive?","Celluloid::Mailbox","Celluloid/Mailbox.html#method-i-alive-3F","()","<p>Is the mailbox alive?\n"],["alive?","Celluloid::ThreadHandle","Celluloid/ThreadHandle.html#method-i-alive-3F","()","<p>Is the thread running?\n"],["alive?","Fiber","Fiber.html#method-i-alive-3F","()",""],["all","Celluloid::Actor","Celluloid/Actor.html#method-i-all","()","<p>Obtain all running actors in the system\n"],["arity","Celluloid::Method","Celluloid/Method.html#method-i-arity","()",""],["assert_inactive","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-assert_inactive","()",""],["assert_running","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-assert_running","()",""],["async","Celluloid::Actor","Celluloid/Actor.html#method-i-async","(mailbox, meth, *args, &block)","<p>Invoke a method asynchronously on an actor via its mailbox\n"],["async","Celluloid::ActorProxy","Celluloid/ActorProxy.html#method-i-async","(method_name = nil, *args, &block)","<p>Obtain an async proxy or explicitly invoke a named async method\n"],["attach","Celluloid::FSM","Celluloid/FSM.html#method-i-attach","(actor)","<p>Attach this FSM to an actor. This allows FSMs to wait for and initiate\nevents in the context of a particular …\n"],["backtrace","Celluloid::Task","Celluloid/Task.html#method-i-backtrace","()",""],["backtrace","Celluloid::TaskThread","Celluloid/TaskThread.html#method-i-backtrace","()",""],["backtrace","Celluloid::ThreadHandle","Celluloid/ThreadHandle.html#method-i-backtrace","()","<p>Obtain the backtrace for this thread\n"],["bare_object","Celluloid::InstanceMethods","Celluloid/InstanceMethods.html#method-i-bare_object","()","<p>Obtain the bare Ruby object the actor is wrapping. This is useful for only\na limited set of use cases …\n"],["before_suspend","Celluloid::Actor::Sleeper","Celluloid/Actor/Sleeper.html#method-i-before_suspend","(task)",""],["blocks","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-i-blocks","()","<p>Actors or sub-applications to be supervised\n"],["boot","Celluloid","Celluloid.html#method-i-boot","()",""],["broadcast","Celluloid::Condition","Celluloid/Condition.html#method-i-broadcast","(value = nil)","<p>Broadcast a value to all waiting tasks and threads\n"],["broadcast","Celluloid::Signals","Celluloid/Signals.html#method-i-broadcast","(name, value = nil)","<p>Send a signal to all method calls waiting for the given name\n"],["busy_size","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-busy_size","()",""],["busy_size","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-busy_size","()",""],["call","Celluloid::Actor","Celluloid/Actor.html#method-i-call","(mailbox, meth, *args, &block)","<p>Invoke a method on the given actor via its mailbox\n"],["call","Celluloid::BlockCall","Celluloid/BlockCall.html#method-i-call","()",""],["call","Celluloid::FSM::State","Celluloid/FSM/State.html#method-i-call","(obj)",""],["call","Celluloid::Future","Celluloid/Future.html#method-i-call","(timeout = nil)",""],["call","Celluloid::IncidentReporter::Formatter","Celluloid/IncidentReporter/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["call","Celluloid::Method","Celluloid/Method.html#method-i-call","(*args, &block)",""],["call","Celluloid::SignalConditionRequest","Celluloid/SignalConditionRequest.html#method-i-call","()",""],["call_chain_id","Celluloid::Thread","Celluloid/Thread.html#method-i-call_chain_id","()","<p>Obtain the call chain ID for this thread\n"],["celluloid?","Celluloid::Thread","Celluloid/Thread.html#method-i-celluloid-3F","()",""],["celluloid?","Thread","Thread.html#method-i-celluloid-3F","()",""],["clean_thread_locals","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-clean_thread_locals","(thread)","<p>Clean the thread locals of an incoming thread\n"],["cleanup","Celluloid::Actor","Celluloid/Actor.html#method-i-cleanup","(exit_event)","<p>Clean up after this actor\n"],["cleanup","Celluloid::SyncCall","Celluloid/SyncCall.html#method-i-cleanup","()",""],["clear","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-clear","()",""],["clear","Celluloid::Registry","Celluloid/Registry.html#method-i-clear","()","<p>removes and returns all registered actors as a hash of `name =&gt; actor`\ncan be used in testing to clear …\n"],["clear","Celluloid::RingBuffer","Celluloid/RingBuffer.html#method-i-clear","()",""],["clear_registry","Celluloid::Actor","Celluloid/Actor.html#method-i-clear_registry","()",""],["cores","Celluloid","Celluloid.html#method-i-cores","()","<p>Obtain the number of CPUs in the system\n"],["cores","Celluloid::CPUCounter","Celluloid/CPUCounter.html#method-c-cores","()",""],["crash","Celluloid::Logger","Celluloid/Logger.html#method-i-crash","(string, exception)","<p>Handle a crash\n"],["create","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-create","()","<p>Create a new thread with an associated queue of procs to run\n"],["create","Celluloid::Task","Celluloid/Task.html#method-i-create","(&block)",""],["create","Celluloid::TaskFiber","Celluloid/TaskFiber.html#method-i-create","()",""],["create","Celluloid::TaskThread","Celluloid/TaskThread.html#method-i-create","()",""],["create_incident","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-create_incident","(event=nil)",""],["current","Celluloid::Actor","Celluloid/Actor.html#method-i-current","()","<p>Obtain the current actor\n"],["current","Celluloid::Task","Celluloid/Task.html#method-c-current","()","<p>Obtain the current task\n"],["current_id","Celluloid::CallChain","Celluloid/CallChain.html#method-c-current_id","()",""],["current_id=","Celluloid::CallChain","Celluloid/CallChain.html#method-c-current_id-3D","(value)",""],["current_state","Celluloid::FSM","Celluloid/FSM.html#method-i-current_state","()",""],["current_state_name","Celluloid::FSM","Celluloid/FSM.html#method-i-current_state_name","()",""],["debug","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-debug","(progname=nil, &block)",""],["debug","Celluloid::Logger","Celluloid/Logger.html#method-i-debug","(string)","<p>Send a debug message\n"],["default_state","Celluloid::FSM","Celluloid/FSM.html#method-i-default_state","()",""],["default_state","Celluloid::FSM::ClassMethods","Celluloid/FSM/ClassMethods.html#method-i-default_state","(new_default = nil)","<p>Obtain or set the default state Passing a state name sets the default state\n"],["delete","Celluloid::Links","Celluloid/Links.html#method-i-delete","(actor)","<p>Remove an actor from the links\n"],["delete","Celluloid::Registry","Celluloid/Registry.html#method-i-delete","(name)",""],["delete","Celluloid::TaskSet","Celluloid/TaskSet.html#method-i-delete","(task)",""],["deliver","Celluloid::TaskFiber","Celluloid/TaskFiber.html#method-i-deliver","(value)","<p>Resume a suspended task, giving it a value to return if needed\n"],["deliver","Celluloid::TaskThread","Celluloid/TaskThread.html#method-i-deliver","(value)",""],["deprecate","Celluloid::Logger","Celluloid/Logger.html#method-i-deprecate","(message)","<p>Note a deprecation\n"],["detect_recursion","Celluloid","Celluloid.html#method-i-detect_recursion","()","<p>Detect if a particular call is recursing through multiple actors\n"],["dispatch","Celluloid::AsyncCall","Celluloid/AsyncCall.html#method-i-dispatch","(obj)",""],["dispatch","Celluloid::BlockCall","Celluloid/BlockCall.html#method-i-dispatch","()",""],["dispatch","Celluloid::BlockResponse","Celluloid/BlockResponse.html#method-i-dispatch","()",""],["dispatch","Celluloid::Call","Celluloid/Call.html#method-i-dispatch","(obj)",""],["dispatch","Celluloid::Response","Celluloid/Response.html#method-i-dispatch","()",""],["dispatch","Celluloid::SyncCall","Celluloid/SyncCall.html#method-i-dispatch","(obj)",""],["display_backtrace","Celluloid::StackDump::DisplayBacktrace","Celluloid/StackDump/DisplayBacktrace.html#method-i-display_backtrace","(backtrace, output, indent = nil)",""],["dump","Celluloid::StackDump","Celluloid/StackDump.html#method-i-dump","(output = STDERR)",""],["dump","Celluloid::StackDump::ActorState","Celluloid/StackDump/ActorState.html#method-i-dump","()",""],["dump","Celluloid::StackDump::ThreadState","Celluloid/StackDump/ThreadState.html#method-i-dump","()",""],["each","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-each","()",""],["each","Celluloid::Links","Celluloid/Links.html#method-i-each","()","<p>Iterate through all links\n"],["each","Celluloid::Mailbox","Celluloid/Mailbox.html#method-i-each","(&block)","<p>Iterate through the mailbox\n"],["empty?","Celluloid::RingBuffer","Celluloid/RingBuffer.html#method-i-empty-3F","()",""],["empty?","Celluloid::TaskSet","Celluloid/TaskSet.html#method-i-empty-3F","()",""],["error","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-error","(progname=nil, &block)",""],["error","Celluloid::Logger","Celluloid/Logger.html#method-i-error","(string)","<p>Send an error message\n"],["every","Celluloid::Actor","Celluloid/Actor.html#method-i-every","(interval, &block)","<p>Schedule a block to run at the given time\n"],["exception_handler","Celluloid","Celluloid.html#method-i-exception_handler","(&block)","<p>Define an exception handler for actor crashes\n"],["exception_handler","Celluloid::Logger","Celluloid/Logger.html#method-i-exception_handler","(&block)","<p>Define an exception handler NOTE: These should be defined at application\nstart time\n"],["exclusive","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-exclusive","(*methods)","<p>Mark methods as running exclusively\n"],["exclusive","Celluloid::Task","Celluloid/Task.html#method-i-exclusive","()","<p>Execute a code block in exclusive mode.\n"],["exclusive?","Celluloid::Task","Celluloid/Task.html#method-i-exclusive-3F","()","<p>Is this task running in exclusive mode?\n"],["execute_block_on_receiver","Celluloid::Call","Celluloid/Call.html#method-i-execute_block_on_receiver","()",""],["fatal","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-fatal","(progname=nil, &block)",""],["finalize","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-i-finalize","()","<p>Terminate the group\n"],["fire_timers","Celluloid::Receivers","Celluloid/Receivers.html#method-i-fire_timers","()","<p>Fire any pending timers\n"],["first","Celluloid::TaskSet","Celluloid/TaskSet.html#method-i-first","()",""],["flush","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-flush","()",""],["flush","Celluloid::RingBuffer","Celluloid/RingBuffer.html#method-i-flush","()",""],["format_exception","Celluloid::Logger","Celluloid/Logger.html#method-i-format_exception","(exception)","<p>Format an exception message\n"],["full?","Celluloid::RingBuffer","Celluloid/RingBuffer.html#method-i-full-3F","()",""],["future","Celluloid::Actor","Celluloid/Actor.html#method-i-future","(mailbox, meth, *args, &block)","<p>Call a method asynchronously and retrieve its value later\n"],["future","Celluloid::ActorProxy","Celluloid/ActorProxy.html#method-i-future","(method_name = nil, *args, &block)","<p>Obtain a future proxy or explicitly invoke a named future method\n"],["generate","Celluloid::UUID","Celluloid/UUID.html#method-c-generate","()",""],["get","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-get","(&block)","<p>Get a thread from the pool, running the given block\n"],["get","Celluloid::Registry","Celluloid/Registry.html#method-i-get","(name)",""],["guard","Celluloid::Task","Celluloid/Task.html#method-i-guard","(message)",""],["handle_crash","Celluloid::Actor","Celluloid/Actor.html#method-i-handle_crash","(exception)","<p>Handle any exceptions that occur within a running actor\n"],["handle_delayed_transitions","Celluloid::FSM","Celluloid/FSM.html#method-i-handle_delayed_transitions","(new_state, delay)",""],["handle_exit_event","Celluloid::Actor","Celluloid/Actor.html#method-i-handle_exit_event","(event)","<p>Handle exit events received by this actor\n"],["handle_message","Celluloid::Actor","Celluloid/Actor.html#method-i-handle_message","(message)","<p>Handle standard low-priority messages\n"],["handle_message","Celluloid::Receivers","Celluloid/Receivers.html#method-i-handle_message","(message)","<p>Handle incoming messages\n"],["handle_system_event","Celluloid::Actor","Celluloid/Actor.html#method-i-handle_system_event","(event)","<p>Handle high-priority system event messages\n"],["idle_size","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-idle_size","()",""],["idle_size","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-idle_size","()",""],["incident_topic","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-incident_topic","()",""],["include?","Celluloid::Links","Celluloid/Links.html#method-i-include-3F","(actor)","<p>Do links include the given actor?\n"],["included","Celluloid","Celluloid.html#method-i-included","(klass)",""],["included","Celluloid::FSM","Celluloid/FSM.html#method-c-included","(klass)","<p>Included hook to extend class methods\n"],["info","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-info","(progname=nil, &block)",""],["info","Celluloid::Logger","Celluloid/Logger.html#method-i-info","(string)","<p>Send a info message\n"],["init","Celluloid","Celluloid.html#method-i-init","()",""],["inspect","Celluloid::ActorProxy","Celluloid/ActorProxy.html#method-i-inspect","()",""],["inspect","Celluloid::AsyncProxy","Celluloid/AsyncProxy.html#method-i-inspect","()",""],["inspect","Celluloid::FutureProxy","Celluloid/FutureProxy.html#method-i-inspect","()",""],["inspect","Celluloid::InstanceMethods","Celluloid/InstanceMethods.html#method-i-inspect","()",""],["inspect","Celluloid::Links","Celluloid/Links.html#method-i-inspect","()","<p>Generate a string representation\n"],["inspect","Celluloid::Mailbox","Celluloid/Mailbox.html#method-i-inspect","()","<p>Inspect the contents of the Mailbox\n"],["inspect","Celluloid::Method","Celluloid/Method.html#method-i-inspect","()",""],["inspect","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-inspect","()",""],["inspect","Celluloid::SyncProxy","Celluloid/SyncProxy.html#method-i-inspect","()",""],["inspect","Celluloid::Task","Celluloid/Task.html#method-i-inspect","()","<p>Nicer string inspect for tasks\n"],["is_a?","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-is_a-3F","(klass)",""],["join","Celluloid::Actor","Celluloid/Actor.html#method-i-join","(actor, timeout = nil)","<p>Wait for an actor to terminate\n"],["join","Celluloid::ThreadHandle","Celluloid/ThreadHandle.html#method-i-join","(limit = nil)","<p>Join to a running thread, blocking until it terminates\n"],["kill","Celluloid::Actor","Celluloid/Actor.html#method-i-kill","(actor)","<p>Forcibly kill a given actor\n"],["kill","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-kill","()",""],["kill","Celluloid::ThreadHandle","Celluloid/ThreadHandle.html#method-i-kill","()","<p>Forcibly kill the thread\n"],["kind_of?","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-kind_of-3F","(klass)",""],["leaked?","Celluloid::InstanceMethods","Celluloid/InstanceMethods.html#method-i-leaked-3F","()","<p>Are we being invoked in a different thread from our owner?\n"],["link","Celluloid::Actor","Celluloid/Actor.html#method-i-link","(actor)","<p>Link to another actor\n"],["linked_to?","Celluloid::Actor","Celluloid/Actor.html#method-i-linked_to-3F","(actor)","<p>Are we bidirectionally linked to the given actor?\n"],["linking_request","Celluloid::Actor","Celluloid/Actor.html#method-i-linking_request","(receiver, type)","<p>Perform a linking request with another actor\n"],["listeners_for","Celluloid::Notifications::Fanout","Celluloid/Notifications/Fanout.html#method-i-listeners_for","(pattern)",""],["listening?","Celluloid::Notifications::Fanout","Celluloid/Notifications/Fanout.html#method-i-listening-3F","(pattern)",""],["log","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-log","(severity, message=nil, progname=nil, &block)",""],["mailbox","Celluloid","Celluloid.html#method-i-mailbox","()","<p>Retrieve the mailbox for the current thread or lazily initialize it\n"],["mailbox","Celluloid::Thread","Celluloid/Thread.html#method-i-mailbox","()","<p>Obtain the Celluloid mailbox for this thread\n"],["mailbox","Thread","Thread.html#method-c-mailbox","()",""],["match","Celluloid::Receiver","Celluloid/Receiver.html#method-i-match","(message)","<p>Match a message with this receiver’s block\n"],["matches?","Celluloid::Notifications::Subscriber","Celluloid/Notifications/Subscriber.html#method-i-matches-3F","(subscriber_or_pattern)",""],["merge","Celluloid::Incident","Celluloid/Incident.html#method-i-merge","(*other_incidents)","<p>Merge two incidents together. This may be useful if two incidents occur at\nthe same time.\n"],["method","Celluloid::ActorProxy","Celluloid/ActorProxy.html#method-i-method","(name)",""],["method_missing","Celluloid::AsyncProxy","Celluloid/AsyncProxy.html#method-i-method_missing","(meth, *args, &block)",""],["method_missing","Celluloid::FutureProxy","Celluloid/FutureProxy.html#method-i-method_missing","(meth, *args, &block)",""],["method_missing","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-method_missing","(method, *args, &block)",""],["method_missing","Celluloid::SyncProxy","Celluloid/SyncProxy.html#method-i-method_missing","(meth, *args, &block)",""],["methods","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-methods","(include_ancestors = true)",""],["monitor","Celluloid::Actor","Celluloid/Actor.html#method-i-monitor","(actor)","<p>Watch for exit events from another actor\n"],["monitoring?","Celluloid::Actor","Celluloid/Actor.html#method-i-monitoring-3F","(actor)","<p>Are we monitoring the given actor?\n"],["name","Celluloid::InstanceMethods","Celluloid/InstanceMethods.html#method-i-name","()","<p>Obtain the name of the current actor\n"],["name","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-name","()",""],["names","Celluloid::Registry","Celluloid/Registry.html#method-i-names","()","<p>List all registered actors by name\n"],["new","Celluloid::AbortError","Celluloid/AbortError.html#method-c-new","(cause)",""],["new","Celluloid::Actor","Celluloid/Actor.html#method-c-new","(subject, options = {})","<p>Wrap the given subject with an Actor\n"],["new","Celluloid::Actor::Sleeper","Celluloid/Actor/Sleeper.html#method-c-new","(timers, interval)",""],["new","Celluloid::ActorProxy","Celluloid/ActorProxy.html#method-c-new","(actor)",""],["new","Celluloid::AsyncProxy","Celluloid/AsyncProxy.html#method-c-new","(mailbox, klass)",""],["new","Celluloid::BlockCall","Celluloid/BlockCall.html#method-c-new","(block_proxy, sender, arguments, task = Thread.current[:celluloid_task])",""],["new","Celluloid::BlockProxy","Celluloid/BlockProxy.html#method-c-new","(call, mailbox, block)",""],["new","Celluloid::BlockResponse","Celluloid/BlockResponse.html#method-c-new","(call, result)",""],["new","Celluloid::Call","Celluloid/Call.html#method-c-new","(method, arguments = [], block = nil)",""],["new","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-new","(*args, &block)","<p>Create a new actor\n"],["new","Celluloid::Condition","Celluloid/Condition.html#method-c-new","()",""],["new","Celluloid::Condition::Waiter","Celluloid/Condition/Waiter.html#method-c-new","(condition, task, mailbox)",""],["new","Celluloid::EventedMailbox","Celluloid/EventedMailbox.html#method-c-new","(reactor_class)",""],["new","Celluloid::ExitEvent","Celluloid/ExitEvent.html#method-c-new","(actor, reason = nil)",""],["new","Celluloid::FSM","Celluloid/FSM.html#method-c-new","(actor = nil)","<p>Be kind and call super if you must redefine initialize\n"],["new","Celluloid::FSM::State","Celluloid/FSM/State.html#method-c-new","(name, transitions = nil, &block)",""],["new","Celluloid::Future","Celluloid/Future.html#method-c-new","()",""],["new","Celluloid::Future","Celluloid/Future.html#method-c-new","(*args, &block)",""],["new","Celluloid::Future::Result","Celluloid/Future/Result.html#method-c-new","(result, future)",""],["new","Celluloid::FutureProxy","Celluloid/FutureProxy.html#method-c-new","(mailbox, klass)",""],["new","Celluloid::Incident","Celluloid/Incident.html#method-c-new","(events, triggering_event=nil)",""],["new","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-c-new","(progname=nil, options={})","<p>Create a new IncidentLogger.\n"],["new","Celluloid::IncidentReporter","Celluloid/IncidentReporter.html#method-c-new","(*args)",""],["new","Celluloid::InternalPool","Celluloid/InternalPool.html#method-c-new","()",""],["new","Celluloid::LinkingRequest","Celluloid/LinkingRequest.html#method-c-new","(actor, type)",""],["new","Celluloid::LinkingResponse","Celluloid/LinkingResponse.html#method-c-new","(actor, type)",""],["new","Celluloid::Links","Celluloid/Links.html#method-c-new","()",""],["new","Celluloid::LogEvent","Celluloid/LogEvent.html#method-c-new","(severity, message, progname, time=Time.now, &block)",""],["new","Celluloid::Mailbox","Celluloid/Mailbox.html#method-c-new","()",""],["new","Celluloid::Method","Celluloid/Method.html#method-c-new","(proxy, name)",""],["new","Celluloid::NamingRequest","Celluloid/NamingRequest.html#method-c-new","(name)",""],["new","Celluloid::Notifications::Fanout","Celluloid/Notifications/Fanout.html#method-c-new","()",""],["new","Celluloid::Notifications::Subscriber","Celluloid/Notifications/Subscriber.html#method-c-new","(actor, pattern, method)",""],["new","Celluloid::PoolManager","Celluloid/PoolManager.html#method-c-new","(worker_class, options = {})",""],["new","Celluloid::Receiver","Celluloid/Receiver.html#method-c-new","(block)",""],["new","Celluloid::Receivers","Celluloid/Receivers.html#method-c-new","()",""],["new","Celluloid::Registry","Celluloid/Registry.html#method-c-new","()",""],["new","Celluloid::Response","Celluloid/Response.html#method-c-new","(call, value)",""],["new","Celluloid::RingBuffer","Celluloid/RingBuffer.html#method-c-new","(size)",""],["new","Celluloid::SignalConditionRequest","Celluloid/SignalConditionRequest.html#method-c-new","(task, value)",""],["new","Celluloid::Signals","Celluloid/Signals.html#method-c-new","()",""],["new","Celluloid::StackDump","Celluloid/StackDump.html#method-c-new","()",""],["new","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-c-new","(registry = nil)","<p>Start the group\n"],["new","Celluloid::SupervisionGroup::Member","Celluloid/SupervisionGroup/Member.html#method-c-new","(registry, klass, options = {})",""],["new","Celluloid::SyncCall","Celluloid/SyncCall.html#method-c-new","(sender, method, arguments = [], block = nil, task = Thread.current[:celluloid_task], chain_id = CallChain.current_id)",""],["new","Celluloid::SyncProxy","Celluloid/SyncProxy.html#method-c-new","(mailbox, klass)",""],["new","Celluloid::Task","Celluloid/Task.html#method-c-new","(type, meta)","<p>Create a new task\n"],["new","Celluloid::TaskSet","Celluloid/TaskSet.html#method-c-new","()",""],["new","Celluloid::TaskThread","Celluloid/TaskThread.html#method-c-new","(type, meta)","<p>Run the given block within a task\n"],["new","Celluloid::ThreadHandle","Celluloid/ThreadHandle.html#method-c-new","(role = nil)",""],["new_link","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-new_link","(*args, &block)","<p>Create a new actor and link to the current one\n"],["next_message","Celluloid::EventedMailbox","Celluloid/EventedMailbox.html#method-i-next_message","(block)","<p>Obtain the next message from the mailbox that matches the given block\n"],["next_message","Celluloid::Mailbox","Celluloid/Mailbox.html#method-i-next_message","()","<p>Retrieve the next message in the mailbox\n"],["notifier","Celluloid::Notifications","Celluloid/Notifications.html#method-c-notifier","()",""],["pool","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-pool","(options = {})","<p>Create a new pool of workers. Accepts the following options:\n<p>size: how many workers to create. Default …\n"],["pool","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-i-pool","(klass, options = {})","<p>Register a pool of actors to be launched on group startup Available options\nare:\n<p>as: register this application …\n"],["pool_link","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-pool_link","(options = {})","<p>Same as pool, but links to the pool manager\n"],["process","Celluloid::LinkingRequest","Celluloid/LinkingRequest.html#method-i-process","(links)",""],["property","Celluloid::Properties","Celluloid/Properties.html#method-i-property","(name, opts = {})",""],["prune","Celluloid::Notifications::Fanout","Celluloid/Notifications/Fanout.html#method-i-prune","(actor, reason=nil)",""],["publish","Celluloid::Notifications","Celluloid/Notifications.html#method-i-publish","(pattern, *args)",""],["publish","Celluloid::Notifications::Fanout","Celluloid/Notifications/Fanout.html#method-i-publish","(pattern, *args)",""],["publish","Celluloid::Notifications::Subscriber","Celluloid/Notifications/Subscriber.html#method-i-publish","(pattern, *args)",""],["push","Celluloid::RingBuffer","Celluloid/RingBuffer.html#method-i-push","(value)",""],["put","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-put","(thread)","<p>Return a thread to the pool\n"],["ready?","Celluloid::Future","Celluloid/Future.html#method-i-ready-3F","()","<p>Check if this future has a value yet\n"],["receive","Celluloid::Actor","Celluloid/Actor.html#method-i-receive","(timeout = nil, &block)","<p>Receive an asynchronous message\n"],["receive","Celluloid::EventedMailbox","Celluloid/EventedMailbox.html#method-i-receive","(timeout = nil, &block)","<p>Receive a message from the Mailbox\n"],["receive","Celluloid::Mailbox","Celluloid/Mailbox.html#method-i-receive","(timeout = nil, &block)","<p>Receive a message from the Mailbox\n"],["receive","Celluloid::Receivers","Celluloid/Receivers.html#method-i-receive","(timeout = nil, &block)","<p>Receive an asynchronous message\n"],["receive","Thread","Thread.html#method-c-receive","(timeout = nil, &block)",""],["register_shutdown","Celluloid","Celluloid.html#method-i-register_shutdown","()",""],["registered","Celluloid::Actor","Celluloid/Actor.html#method-i-registered","()",""],["report","Celluloid::IncidentReporter","Celluloid/IncidentReporter.html#method-i-report","(topic, incident)",""],["respond","Celluloid::SyncCall","Celluloid/SyncCall.html#method-i-respond","(message)",""],["respond_to?","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","Celluloid::SyncProxy","Celluloid/SyncProxy.html#method-i-respond_to-3F","(meth, include_private = false)",""],["restart","Celluloid::SupervisionGroup::Member","Celluloid/SupervisionGroup/Member.html#method-i-restart","(reason)",""],["restart_actor","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-i-restart_actor","(actor, reason)","<p>Restart a crashed actor\n"],["resume","Celluloid::Receiver","Celluloid/Receiver.html#method-i-resume","(message = nil)",""],["resume","Celluloid::Task","Celluloid/Task.html#method-i-resume","(value = nil)","<p>Resume a suspended task, giving it a value to return if needed\n"],["role","Celluloid::Thread","Celluloid/Thread.html#method-i-role","()","<p>Obtain the role of this thread\n"],["role=","Celluloid::Thread","Celluloid/Thread.html#method-i-role-3D","(role)",""],["run","Celluloid::Actor","Celluloid/Actor.html#method-i-run","()","<p>Run the actor loop\n"],["run","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-run","(*args, &block)","<p>Run an actor in the foreground\n"],["run","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-i-run","(registry = nil)","<p>Run the application in the foreground with a simple watchdog\n"],["run!","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-i-run-21","(registry = nil)","<p>Start this application (and watch it with a supervisor)\n"],["run_finalizer","Celluloid::Actor","Celluloid/Actor.html#method-i-run_finalizer","()","<p>Run the user-defined finalizer, if one is set\n"],["running?","Celluloid","Celluloid.html#method-i-running-3F","()",""],["running?","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-running-3F","()",""],["running?","Celluloid::Task","Celluloid/Task.html#method-i-running-3F","()","<p>Is the current task still running?\n"],["set","Celluloid::Registry","Celluloid/Registry.html#method-i-set","(name, actor)",""],["setup_thread","Celluloid::Actor","Celluloid/Actor.html#method-i-setup_thread","()",""],["severity_to_string","Celluloid::IncidentLogger::Severity","Celluloid/IncidentLogger/Severity.html#method-i-severity_to_string","(severity)",""],["shift","Celluloid::RingBuffer","Celluloid/RingBuffer.html#method-i-shift","()",""],["shutdown","Celluloid","Celluloid.html#method-i-shutdown","()","<p>Shut down all running actors\n"],["shutdown","Celluloid::Actor","Celluloid/Actor.html#method-i-shutdown","(exit_event = ExitEvent.new(@proxy))","<p>Handle cleaning up this actor after it exits\n"],["shutdown","Celluloid::EventedMailbox","Celluloid/EventedMailbox.html#method-i-shutdown","()","<p>Cleanup any IO objects this Mailbox may be using\n"],["shutdown","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-shutdown","()",""],["shutdown","Celluloid::Mailbox","Celluloid/Mailbox.html#method-i-shutdown","()","<p>Shut down this mailbox and clean up its contents\n"],["signal","Celluloid::Actor","Celluloid/Actor.html#method-i-signal","(name, value = nil)","<p>Send a signal with the given name to all waiting methods\n"],["signal","Celluloid::Condition","Celluloid/Condition.html#method-i-signal","(value = nil)","<p>Send a signal to the first task waiting on this condition\n"],["signal","Celluloid::Future","Celluloid/Future.html#method-i-signal","(value)","<p>Signal this future with the given result value\n"],["signal","Celluloid::TaskFiber","Celluloid/TaskFiber.html#method-i-signal","()",""],["signal","Celluloid::TaskThread","Celluloid/TaskThread.html#method-i-signal","()",""],["silence","Celluloid::IncidentReporter","Celluloid/IncidentReporter.html#method-i-silence","()",""],["silenced?","Celluloid::IncidentReporter","Celluloid/IncidentReporter.html#method-i-silenced-3F","()",""],["size","Celluloid::Mailbox","Celluloid/Mailbox.html#method-i-size","()","<p>Number of messages in the Mailbox\n"],["size","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-size","()",""],["sleep","Celluloid::Actor","Celluloid/Actor.html#method-i-sleep","(interval)","<p>Sleep for the given amount of time\n"],["snapshot","Celluloid::StackDump","Celluloid/StackDump.html#method-i-snapshot","()",""],["snapshot_actor","Celluloid::StackDump","Celluloid/StackDump.html#method-i-snapshot_actor","(actor)",""],["snapshot_thread","Celluloid::StackDump","Celluloid/StackDump.html#method-i-snapshot_thread","(thread)",""],["spawn","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-spawn","(*args, &block)",""],["spawn_link","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-spawn_link","(*args, &block)",""],["stack_dump","Celluloid","Celluloid.html#method-i-stack_dump","(output = STDERR)","<p>Perform a stack dump of all actors to the given output object\n"],["start","Celluloid","Celluloid.html#method-i-start","()","<p>Launch default services FIXME: We should set up the supervision hierarchy\nhere\n"],["start","Celluloid::SupervisionGroup::Member","Celluloid/SupervisionGroup/Member.html#method-i-start","()",""],["state","Celluloid::FSM::ClassMethods","Celluloid/FSM/ClassMethods.html#method-i-state","(*args, &block)","<p>Declare an FSM state and optionally provide a callback block to fire\nOptions:\n<p>to: a state or array of …\n\n"],["states","Celluloid::FSM","Celluloid/FSM.html#method-i-states","()",""],["states","Celluloid::FSM::ClassMethods","Celluloid/FSM/ClassMethods.html#method-i-states","()","<p>Obtain the valid states for this FSM\n"],["subscribe","Celluloid::Notifications","Celluloid/Notifications.html#method-i-subscribe","(pattern, method)",""],["subscribe","Celluloid::Notifications::Fanout","Celluloid/Notifications/Fanout.html#method-i-subscribe","(actor, pattern, method)",""],["subscribed_to?","Celluloid::Notifications::Subscriber","Celluloid/Notifications/Subscriber.html#method-i-subscribed_to-3F","(pattern)",""],["supervise","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-supervise","(*args, &block)","<p>Create a supervisor which ensures an instance of an actor will restart an\nactor if it fails\n"],["supervise","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-i-supervise","(klass, options = {})","<p>Register an actor class or a sub-group to be launched and supervised\nAvailable options are:\n<p>as: register …\n"],["supervise","Celluloid::Supervisor","Celluloid/Supervisor.html#method-i-supervise","(klass, *args, &block)",""],["supervise_as","Celluloid::ClassMethods","Celluloid/ClassMethods.html#method-i-supervise_as","(name, *args, &block)","<p>Create a supervisor which ensures an instance of an actor will restart an\nactor if it fails, and keep …\n"],["supervise_as","Celluloid::SupervisionGroup","Celluloid/SupervisionGroup.html#method-i-supervise_as","(name, klass, *args, &block)",""],["supervise_as","Celluloid::Supervisor","Celluloid/Supervisor.html#method-i-supervise_as","(name, klass, *args, &block)",""],["suspend","Celluloid","Celluloid.html#method-i-suspend","(status, waiter)",""],["suspend","Celluloid::Task","Celluloid/Task.html#method-i-suspend","(status)","<p>Suspend the current task, changing the status to the given argument\n"],["suspend","Celluloid::Task","Celluloid/Task.html#method-c-suspend","(status)","<p>Suspend the running task, deferring to the scheduler\n"],["tap","Celluloid::InstanceMethods","Celluloid/InstanceMethods.html#method-i-tap","()",""],["task","Celluloid::Actor","Celluloid/Actor.html#method-i-task","(task_type, meta = nil)","<p>Run a method inside a task unless it’s exclusive\n"],["task","Celluloid::Thread","Celluloid/Thread.html#method-i-task","()","<p>Obtain the Celluloid task object for this thread\n"],["terminate","Celluloid::Actor","Celluloid/Actor.html#method-i-terminate","()","<p>Terminate this actor\n"],["terminate","Celluloid::ActorProxy","Celluloid/ActorProxy.html#method-i-terminate","()","<p>Terminate the associated actor\n"],["terminate","Celluloid::SupervisionGroup::Member","Celluloid/SupervisionGroup/Member.html#method-i-terminate","()",""],["terminate","Celluloid::Task","Celluloid/Task.html#method-i-terminate","()","<p>Terminate this task\n"],["terminate","Celluloid::TaskFiber","Celluloid/TaskFiber.html#method-i-terminate","()","<p>Terminate this task\n"],["terminate!","Celluloid::ActorProxy","Celluloid/ActorProxy.html#method-i-terminate-21","()","<p>Terminate the associated actor asynchronously\n"],["timeout","Celluloid::Actor","Celluloid/Actor.html#method-i-timeout","(duration)",""],["timeout_interval","Celluloid::Actor","Celluloid/Actor.html#method-i-timeout_interval","()","<p>How long to wait until the next timer fires\n"],["to_a","Celluloid::InternalPool","Celluloid/InternalPool.html#method-i-to_a","()",""],["to_a","Celluloid::Mailbox","Celluloid/Mailbox.html#method-i-to_a","()","<p>Cast to an array\n"],["to_a","Celluloid::TaskSet","Celluloid/TaskSet.html#method-i-to_a","()",""],["to_proc","Celluloid::BlockProxy","Celluloid/BlockProxy.html#method-i-to_proc","()",""],["to_s","Celluloid::PoolManager","Celluloid/PoolManager.html#method-i-to_s","()",""],["trace","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-trace","(progname=nil, &block)","<p>See docs for Logger#info\n"],["transition","Celluloid::FSM","Celluloid/FSM.html#method-i-transition","(state_name, options = {})","<p>Transition to another state Options:\n<p>delay: don’t transition immediately, wait the given number of seconds. …\n"],["transition!","Celluloid::FSM","Celluloid/FSM.html#method-i-transition-21","(state_name)","<p>Immediate state transition with no sanity checks, or callbacks.\n“Dangerous!”\n"],["transition_with_callbacks!","Celluloid::FSM","Celluloid/FSM.html#method-i-transition_with_callbacks-21","(state_name)",""],["unknown","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-unknown","(progname=nil, &block)",""],["unlink","Celluloid::Actor","Celluloid/Actor.html#method-i-unlink","(actor)","<p>Unlink from another actor\n"],["unmonitor","Celluloid::Actor","Celluloid/Actor.html#method-i-unmonitor","(actor)","<p>Stop waiting for exit events from another actor\n"],["unsilence","Celluloid::IncidentReporter","Celluloid/IncidentReporter.html#method-i-unsilence","()",""],["unsubscribe","Celluloid::Notifications","Celluloid/Notifications.html#method-i-unsubscribe","(*args)",""],["unsubscribe","Celluloid::Notifications::Fanout","Celluloid/Notifications/Fanout.html#method-i-unsubscribe","(subscriber)",""],["uuid","Celluloid","Celluloid.html#method-i-uuid","()","<p>Generate a Universally Unique Identifier\n"],["valid_transition?","Celluloid::FSM::State","Celluloid/FSM/State.html#method-i-valid_transition-3F","(new_state)",""],["validate_and_sanitize_new_state","Celluloid::FSM","Celluloid/FSM.html#method-i-validate_and_sanitize_new_state","(state_name)",""],["value","Celluloid::ErrorResponse","Celluloid/ErrorResponse.html#method-i-value","()",""],["value","Celluloid::Future","Celluloid/Future.html#method-i-value","(timeout = nil)","<p>Obtain the value for this Future\n"],["value","Celluloid::Future::Result","Celluloid/Future/Result.html#method-i-value","()",""],["value","Celluloid::SyncCall","Celluloid/SyncCall.html#method-i-value","()",""],["version","Celluloid","Celluloid.html#method-i-version","()",""],["wait","Celluloid::Actor","Celluloid/Actor.html#method-i-wait","(name)","<p>Wait for the given signal\n"],["wait","Celluloid::Actor::Sleeper","Celluloid/Actor/Sleeper.html#method-i-wait","()",""],["wait","Celluloid::Condition","Celluloid/Condition.html#method-i-wait","()","<p>Wait for the given signal and return the associated value\n"],["wait","Celluloid::Condition::Waiter","Celluloid/Condition/Waiter.html#method-i-wait","()",""],["wait","Celluloid::Signals","Celluloid/Signals.html#method-i-wait","(name)","<p>Wait for the given signal and return the associated value\n"],["wait","Celluloid::SyncCall","Celluloid/SyncCall.html#method-i-wait","()",""],["wait_interval","Celluloid::Receivers","Celluloid/Receivers.html#method-i-wait_interval","()","<p>How long to wait until the next timer fires\n"],["warn","Celluloid::IncidentLogger","Celluloid/IncidentLogger.html#method-i-warn","(progname=nil, &block)",""],["warn","Celluloid::Logger","Celluloid/Logger.html#method-i-warn","(string)","<p>Send a warning message\n"],["wrapped_object","Celluloid::InstanceMethods","Celluloid/InstanceMethods.html#method-i-wrapped_object","()",""]]}}