var search_data = {"index":{"searchIndex":["timers","timer","<=>()","add()","after()","after_milliseconds()","after_ms()","call()","cancel()","every()","fire()","fire()","inspect()","new()","new()","reset()","wait()","wait_interval()"],"longSearchIndex":["timers","timers::timer","timers::timer#<=>()","timers#add()","timers#after()","timers#after_milliseconds()","timers#after_ms()","timers::timer#call()","timers::timer#cancel()","timers#every()","timers#fire()","timers::timer#fire()","timers::timer#inspect()","timers::new()","timers::timer::new()","timers::timer#reset()","timers#wait()","timers#wait_interval()"],"info":[["Timers","","Timers.html","","<p>Low precision timers implemented in pure Ruby\n"],["Timers::Timer","","Timers/Timer.html","","<p>An individual timer set to fire a given proc at a given time\n"],["<=>","Timers::Timer","Timers/Timer.html#method-i-3C-3D-3E","(other)",""],["add","Timers","Timers.html#method-i-add","(timer)",""],["after","Timers","Timers.html#method-i-after","(interval, &block)","<p>Call the given block after the given interval\n"],["after_milliseconds","Timers","Timers.html#method-i-after_milliseconds","(interval, &block)","<p>Call the given block after the given interval has expired.\n<code>interval</code> is measured in milliseconds.\n\n<pre>Timer.new.after_milliseconds(25) ...</pre>\n"],["after_ms","Timers","Timers.html#method-i-after_ms","(interval, &block)",""],["call","Timers::Timer","Timers/Timer.html#method-i-call","(now = Time.now)",""],["cancel","Timers::Timer","Timers/Timer.html#method-i-cancel","()","<p>Cancel this timer\n"],["every","Timers","Timers.html#method-i-every","(interval, &block)","<p>Call the given block periodically at the given interval\n"],["fire","Timers","Timers.html#method-i-fire","(now = Time.now)","<p>Fire all timers that are ready\n"],["fire","Timers::Timer","Timers/Timer.html#method-i-fire","(now = Time.now)","<p>Fire the block\n"],["inspect","Timers::Timer","Timers/Timer.html#method-i-inspect","()","<p>Inspect a timer\n"],["new","Timers","Timers.html#method-c-new","()",""],["new","Timers::Timer","Timers/Timer.html#method-c-new","(timers, interval, recurring = false, &block)",""],["reset","Timers::Timer","Timers/Timer.html#method-i-reset","(now = Time.now)","<p>Reset this timer\n"],["wait","Timers","Timers.html#method-i-wait","()","<p>Wait for the next timer and fire it\n"],["wait_interval","Timers","Timers.html#method-i-wait_interval","(now = Time.now)","<p>Interval to wait until when the next timer will fire\n"]]}}