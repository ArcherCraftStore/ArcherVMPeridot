var search_data = {"index":{"searchIndex":["inotify","event","native","event","ffi","library","flags","notifier","watcher","absolute_name()","callback!()","callback!()","close()","close()","consume()","flags()","from_mask()","new()","new()","new()","process()","read_events()","run()","size()","stop()","supports_ruby_io?()","to_io()","to_mask()","watch()","watcher()","readme"],"longSearchIndex":["inotify","inotify::event","inotify::native","inotify::native::event","inotify::native::ffi","inotify::native::ffi::library","inotify::native::flags","inotify::notifier","inotify::watcher","inotify::event#absolute_name()","inotify::event#callback!()","inotify::watcher#callback!()","inotify::notifier#close()","inotify::watcher#close()","inotify::event::consume()","inotify::event#flags()","inotify::native::flags::from_mask()","inotify::event::new()","inotify::notifier::new()","inotify::watcher::new()","inotify::notifier#process()","inotify::notifier#read_events()","inotify::notifier#run()","inotify::event#size()","inotify::notifier#stop()","inotify::notifier::supports_ruby_io?()","inotify::notifier#to_io()","inotify::native::flags::to_mask()","inotify::notifier#watch()","inotify::event#watcher()",""],"info":[["INotify","","INotify.html","","<p>The root module of the library, which is laid out as so:\n<p>{Notifier} – The main class, where the notifications …\n"],["INotify::Event","","INotify/Event.html","","<p>An event caused by a change on the filesystem. Each {Watcher} can fire many\nevents, which are passed …\n"],["INotify::Native","","INotify/Native.html","","<p>This module contains the low-level foreign-function interface code for\ndealing with the inotify C APIs …\n"],["INotify::Native::Event","","INotify/Native/Event.html","","<p>The C struct describing an inotify event.\n<p>@private\n"],["INotify::Native::FFI","","INotify/Native/FFI.html","",""],["INotify::Native::FFI::Library","","INotify/Native/FFI/Library.html","",""],["INotify::Native::Flags","","INotify/Native/Flags.html","","<p>A module containing all the inotify flags to be passed to {Notifier#watch}.\n<p>@private\n"],["INotify::Notifier","","INotify/Notifier.html","","<p>Notifier wraps a single instance of inotify. It’s possible to have more\nthan one instance, but usually …\n"],["INotify::Watcher","","INotify/Watcher.html","","<p>Watchers monitor a single path for changes, specified by\n{INotify::Notifier#watch event flags}. A watcher …\n"],["absolute_name","INotify::Event","INotify/Event.html#method-i-absolute_name","()","<p>The absolute path of the file that the event occurred on.\n<p>This is actually only as absolute as the path …\n"],["callback!","INotify::Event","INotify/Event.html#method-i-callback-21","()","<p>Calls the callback of the watcher that fired this event, passing in the\nevent itself.\n<p>@private\n"],["callback!","INotify::Watcher","INotify/Watcher.html#method-i-callback-21","(event)","<p>Calls this Watcher’s callback with the given {Event}.\n<p>@private @param event [Event]\n"],["close","INotify::Notifier","INotify/Notifier.html#method-i-close","()","<p>Close the notifier.\n<p>@raise [SystemCallError] if closing the underlying file descriptor fails.\n"],["close","INotify::Watcher","INotify/Watcher.html#method-i-close","()","<p>Disables this Watcher, so that it doesn’t fire any more events.\n<p>@raise [SystemCallError] if the watch …\n"],["consume","INotify::Event","INotify/Event.html#method-c-consume","(data, notifier)","<p>Constructs an {Event} object from a string of binary data, and\ndestructively modifies the string to get …\n"],["flags","INotify::Event","INotify/Event.html#method-i-flags","()","<p>Returns the flags that describe this event. This is generally similar to\nthe input to {Notifier#watch}, …\n"],["from_mask","INotify::Native::Flags","INotify/Native/Flags.html#method-c-from_mask","(mask)","<p>Converts a bitmask from the C API into a list of flags.\n<p>@param mask [Fixnum] @return [Array&lt;Symbol&gt;] …\n"],["new","INotify::Event","INotify/Event.html#method-c-new","(data, notifier)","<p>Creates an event from a string of binary data. Differs from {Event.consume}\nin that it doesn’t modify …\n"],["new","INotify::Notifier","INotify/Notifier.html#method-c-new","()","<p>Creates a new {Notifier}.\n<p>@return [Notifier] @raise [SystemCallError] if inotify failed to initialize\n…\n"],["new","INotify::Watcher","INotify/Watcher.html#method-c-new","(notifier, path, *flags, &callback)","<p>Creates a new {Watcher}.\n<p>@private @see Notifier#watch\n"],["process","INotify::Notifier","INotify/Notifier.html#method-i-process","()","<p>Blocks until there are one or more filesystem events that this notifier has\nwatchers registered for. …\n"],["read_events","INotify::Notifier","INotify/Notifier.html#method-i-read_events","()","<p>Blocks until there are one or more filesystem events that this notifier has\nwatchers registered for. …\n"],["run","INotify::Notifier","INotify/Notifier.html#method-i-run","()","<p>Starts the notifier watching for filesystem events. Blocks until {#stop} is\ncalled.\n<p>@see #process\n"],["size","INotify::Event","INotify/Event.html#method-i-size","()","<p>Returns the size of this event object in bytes, including the {#name}\nstring.\n<p>@return [Fixnum]\n"],["stop","INotify::Notifier","INotify/Notifier.html#method-i-stop","()","<p>Stop watching for filesystem events. That is, if we’re in a {#run} loop,\nexit out as soon as we finish …\n"],["supports_ruby_io?","INotify::Notifier","INotify/Notifier.html#method-c-supports_ruby_io-3F","()","<p>@return [Boolean] Whether or not this Ruby implementation supports\n\n<pre>wrapping the native file descriptor ...</pre>\n"],["to_io","INotify::Notifier","INotify/Notifier.html#method-i-to_io","()","<p>Returns a Ruby IO object wrapping the underlying file descriptor. Since\nthis file descriptor is fully …\n"],["to_mask","INotify::Native::Flags","INotify/Native/Flags.html#method-c-to_mask","(flags)","<p>Converts a list of flags to the bitmask that the C API expects.\n<p>@param flags [Array&lt;Symbol&gt;] @return …\n"],["watch","INotify::Notifier","INotify/Notifier.html#method-i-watch","(path, *flags, &callback)","<p>Watches a file or directory for changes, calling the callback when there\nare. This is only activated …\n"],["watcher","INotify::Event","INotify/Event.html#method-i-watcher","()","<p>Returns the {Watcher} that fired this event.\n<p>@return [Watcher]\n"],["README","","README_md.html","","<p>rb-inotify\n<p>This is a simple wrapper over the inotify Linux kernel subsystem\nfor\nmonitoring changes to ...\n"]]}}