var search_data = {"index":{"searchIndex":["ffi","autopointer","callablereleaser","defaultreleaser","releaser","constgenerator","constant","enum","enums","generator","task","io","library","managedstruct","notfounderror","platform","platformerror","pointer","strptrconverter","struct","managedstructconverter","structgenerator","field","structlayout","enum","innerstruct","mapped","structlayoutbuilder","type","typesgenerator","union","variadicinvoker","rbconfig","unknown","<<()","[]()","[]()","__map_symbol()","add()","add_array()","add_field()","add_struct()","add_typedef()","align()","aligned()","alignment()","alignment()","alignment=()","attach()","attach_function()","attach_variable()","auto_ptr()","autorelease=()","autorelease?()","bsd?()","build()","builder()","by_ref()","by_value()","calculate()","calculate()","call()","call()","callback()","callback()","clear()","const()","constants()","converted_value()","dump_config()","dump_constants()","enclosing_module()","enum()","enum_type()","enum_value()","errno()","errno=()","extended()","ffi_convention()","ffi_lib()","ffi_lib_flags()","ffi_libraries()","field()","find()","find()","find_field_type()","find_type()","find_type()","find_type()","for_fd()","found?()","free()","free()","from_native()","from_native()","from_native()","from_native()","function_names()","generate()","generate_layout()","get()","get()","get()","get_field()","in()","include()","include()","init()","layout()","mac?()","map_library_name()","members()","members()","name()","native_read()","native_type()","native_type()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","offset=()","offset_of()","offset_of()","offset_of()","offsets()","offsets()","offsets()","options()","options()","options=()","options=()","out()","packed()","packed=()","ptr()","put()","put()","put()","read_array_of_type()","read_string()","read_string_length()","read_string_to_null()","release()","release()","ruby_name()","size()","size()","size()","size=()","size=()","struct()","symbol_map()","symbols()","to_config()","to_h()","to_hash()","to_native()","to_ptr()","to_ruby()","to_ruby()","to_s()","type_size()","typedef()","typedef()","union=()","union?()","unix?()","val()","values()","windows?()","write_array_of_type()","write_string()","write_string_length()","changelog","changelog.libffi","changelog.libgcj","changelog.v1","license","makefile.am","makefile.in","makefile.vc","makefile.vc64","readme","acinclude.m4","build-ios.sh","compile","config.guess","config.sub","configure","configure.ac","configure.host","depcomp","libffi.info","stamp-vti","version.texi","fficonfig.h.in","makefile.am","makefile.in","install-sh","libffi.pc.in","libtool-version","ltmain.sh","ax_cc_maxopt.m4","ax_cflags_warn_all.m4","ax_check_compiler_flags.m4","ax_compiler_vendor.m4","ax_configure_args.m4","ax_enable_builddir.m4","ax_gcc_archflag.m4","ax_gcc_x86_cpuid.m4","makefile.am","makefile.in","ffi.3","ffi_call.3","ffi_prep_cif.3","mdate-sh","missing","msvcc.sh","osf.s","gentramp.sh","sysv.s","trampoline.s","sysv.s","sysv.s","eabi.s","unix.s","sysv.s","sysv.s","n32.s","o32.s","eabi.s","hpux32.s","linux.s","aix.s","aix_closure.s","darwin.s","darwin_closure.s","linux64.s","linux64_closure.s","ppc_closure.s","sysv.s","sysv.s","sysv.s","sysv.s","v8.s","v9.s","darwin.s","darwin64.s","freebsd.s","sysv.s","unix64.s","win32.s","win64.s","makefile.am","makefile.in","default.exp","libffi-dg.exp","libffi.exp","target-libpath.exp","wrapper.exp","call.exp","special.exp","texinfo.tex","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf","types.conf"],"longSearchIndex":["ffi","ffi::autopointer","ffi::autopointer::callablereleaser","ffi::autopointer::defaultreleaser","ffi::autopointer::releaser","ffi::constgenerator","ffi::constgenerator::constant","ffi::enum","ffi::enums","ffi::generator","ffi::generator::task","ffi::io","ffi::library","ffi::managedstruct","ffi::notfounderror","ffi::platform","ffi::platformerror","ffi::pointer","ffi::strptrconverter","ffi::struct","ffi::struct::managedstructconverter","ffi::structgenerator","ffi::structgenerator::field","ffi::structlayout","ffi::structlayout::enum","ffi::structlayout::innerstruct","ffi::structlayout::mapped","ffi::structlayoutbuilder","ffi::type","ffi::typesgenerator","ffi::union","ffi::variadicinvoker","rbconfig","unknown","ffi::enums#<<()","ffi::constgenerator#[]()","ffi::enum#[]()","ffi::enums#__map_symbol()","ffi::structlayoutbuilder#add()","ffi::structlayoutbuilder#add_array()","ffi::structlayoutbuilder#add_field()","ffi::structlayoutbuilder#add_struct()","ffi::add_typedef()","ffi::struct#align()","ffi::struct#aligned()","ffi::struct::alignment()","ffi::struct#alignment()","ffi::structlayoutbuilder#alignment=()","ffi::variadicinvoker#attach()","ffi::library#attach_function()","ffi::library#attach_variable()","ffi::struct::auto_ptr()","ffi::autopointer#autorelease=()","ffi::autopointer#autorelease?()","ffi::platform::bsd?()","ffi::structlayoutbuilder#build()","ffi::union::builder()","ffi::struct::by_ref()","ffi::struct::by_value()","ffi::constgenerator#calculate()","ffi::structgenerator#calculate()","ffi::autopointer::releaser#call()","ffi::variadicinvoker#call()","ffi::library#callback()","ffi::struct#callback()","ffi::struct#clear()","ffi::constgenerator#const()","ffi::generator#constants()","ffi::constgenerator::constant#converted_value()","ffi::structgenerator#dump_config()","ffi::constgenerator#dump_constants()","ffi::struct#enclosing_module()","ffi::library#enum()","ffi::library#enum_type()","ffi::library#enum_value()","ffi::errno()","ffi::errno=()","ffi::library::extended()","ffi::library#ffi_convention()","ffi::library#ffi_lib()","ffi::library#ffi_lib_flags()","ffi::library#ffi_libraries()","ffi::structgenerator#field()","ffi::enum#find()","ffi::enums#find()","ffi::struct#find_field_type()","ffi::find_type()","ffi::library#find_type()","ffi::struct#find_type()","ffi::io::for_fd()","ffi::structgenerator#found?()","ffi::autopointer#free()","ffi::autopointer::releaser#free()","ffi::autopointer::from_native()","ffi::enum#from_native()","ffi::strptrconverter::from_native()","ffi::struct::managedstructconverter#from_native()","ffi::library#function_names()","ffi::typesgenerator::generate()","ffi::structgenerator#generate_layout()","ffi::structlayout::enum#get()","ffi::structlayout::innerstruct#get()","ffi::structlayout::mapped#get()","ffi::structgenerator#get_field()","ffi::struct::in()","ffi::constgenerator#include()","ffi::structgenerator#include()","ffi::variadicinvoker#init()","ffi::struct#layout()","ffi::platform::mac?()","ffi::map_library_name()","ffi::struct#members()","ffi::struct::members()","ffi::structgenerator#name()","ffi::io::native_read()","ffi::autopointer::native_type()","ffi::enum#native_type()","ffi::autopointer::new()","ffi::autopointer::releaser::new()","ffi::constgenerator::new()","ffi::constgenerator::constant::new()","ffi::enum::new()","ffi::enums::new()","ffi::generator::new()","ffi::generator::task::new()","ffi::managedstruct::new()","ffi::notfounderror::new()","ffi::struct::managedstructconverter::new()","ffi::structgenerator::new()","ffi::structgenerator::field::new()","ffi::structlayout::mapped::new()","ffi::structlayoutbuilder::new()","ffi::structgenerator::field#offset=()","ffi::struct::offset_of()","ffi::struct#offset_of()","ffi::structlayout#offset_of()","ffi::struct#offsets()","ffi::struct::offsets()","ffi::structlayout#offsets()","ffi::constgenerator::options()","ffi::structgenerator::options()","ffi::constgenerator::options=()","ffi::structgenerator::options=()","ffi::struct::out()","ffi::struct#packed()","ffi::structlayoutbuilder#packed=()","ffi::struct::ptr()","ffi::structlayout::enum#put()","ffi::structlayout::innerstruct#put()","ffi::structlayout::mapped#put()","ffi::pointer#read_array_of_type()","ffi::pointer#read_string()","ffi::pointer#read_string_length()","ffi::pointer#read_string_to_null()","ffi::autopointer::callablereleaser#release()","ffi::autopointer::defaultreleaser#release()","ffi::constgenerator::constant#ruby_name()","ffi::pointer::size()","ffi::struct#size()","ffi::struct::size()","ffi::struct::size=()","ffi::structlayoutbuilder#size=()","ffi::generator#struct()","ffi::enum#symbol_map()","ffi::enum#symbols()","ffi::structgenerator::field#to_config()","ffi::enum#to_h()","ffi::enum#to_hash()","ffi::enum#to_native()","ffi::struct#to_ptr()","ffi::constgenerator#to_ruby()","ffi::constgenerator::constant#to_ruby()","ffi::generator#to_s()","ffi::type_size()","ffi::typedef()","ffi::library#typedef()","ffi::structlayoutbuilder#union=()","ffi::structlayoutbuilder#union?()","ffi::platform::unix?()","ffi::struct::val()","ffi::struct#values()","ffi::platform::windows?()","ffi::pointer#write_array_of_type()","ffi::pointer#write_string()","ffi::pointer#write_string_length()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["FFI","","FFI.html","","<p>This module embbed type constants from {FFI::NativeType}.\n<p>Copyright (C) 2008-2010 Wayne Meissner Copyright …\n"],["FFI::AutoPointer","","FFI/AutoPointer.html","",""],["FFI::AutoPointer::CallableReleaser","","FFI/AutoPointer/CallableReleaser.html","","<p>CallableReleaser is a {Releaser} used when an {AutoPointer} is defined with\na Proc or a Method.\n"],["FFI::AutoPointer::DefaultReleaser","","FFI/AutoPointer/DefaultReleaser.html","","<p>DefaultReleaser is a {Releaser} used when an {AutoPointer} is defined\nwithout Proc or Method. In this …\n"],["FFI::AutoPointer::Releaser","","FFI/AutoPointer/Releaser.html","","<p>@abstract Base class for {AutoPointer}‘s releasers.\n\n<pre>All subclasses of Releaser should define a +#release(ptr)+ ...</pre>\n"],["FFI::ConstGenerator","","FFI/ConstGenerator.html","","<p>ConstGenerator turns C constants into ruby values.\n<p>@example a simple example for stdio\n\n<pre>cg = FFI::ConstGenerator.new('stdio') ...</pre>\n"],["FFI::ConstGenerator::Constant","","FFI/ConstGenerator/Constant.html","","<p>This class hold constants for {ConstGenerator}\n"],["FFI::Enum","","FFI/Enum.html","","<p>Represents a C enum.\n<p>For a C enum:\n\n<pre>enum fruits {\n  apple,\n  banana,\n  orange,\n  pineapple\n};</pre>\n"],["FFI::Enums","","FFI/Enums.html","","<p>An instance of this class permits to manage {Enum}s. In fact, Enums is a\ncollection of {Enum}s.\n"],["FFI::Generator","","FFI/Generator.html","","<p>@private\n"],["FFI::Generator::Task","","FFI/Generator/Task.html","","<p>@private\n"],["FFI::IO","","FFI/IO.html","","<p>This module implements a couple of class methods to play with IO.\n"],["FFI::Library","","FFI/Library.html","","<p>This module is the base to use native functions.\n<p>A basic usage may be:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'ffi'</span>\n\n<span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Hello</span>\n  <span class=\"ruby-identifier\">extend</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["FFI::ManagedStruct","","FFI/ManagedStruct.html","","<p>FFI::ManagedStruct allows custom garbage-collection of your FFI::Structs.\n<p>The typical use case would be …\n"],["FFI::NotFoundError","","FFI/NotFoundError.html","","<p>Exception raised when a function is not found in libraries\n"],["FFI::Platform","","FFI/Platform.html","","<p>This module defines different constants and class methods to play with\nvarious platforms.\n"],["FFI::PlatformError","","FFI/PlatformError.html","",""],["FFI::Pointer","","FFI/Pointer.html","",""],["FFI::StrPtrConverter","","FFI/StrPtrConverter.html","",""],["FFI::Struct","","FFI/Struct.html","",""],["FFI::Struct::ManagedStructConverter","","FFI/Struct/ManagedStructConverter.html","",""],["FFI::StructGenerator","","FFI/StructGenerator.html","","<p>Generates an FFI Struct layout.\n<p>Given the @@@ portion in:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Zlib</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">ZStream</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">FFI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Struct</span>\n  <span class=\"ruby-identifier\">@@</span>@\n  <span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["FFI::StructGenerator::Field","","FFI/StructGenerator/Field.html","","<p>A field in a Struct.\n"],["FFI::StructLayout","","FFI/StructLayout.html","",""],["FFI::StructLayout::Enum","","FFI/StructLayout/Enum.html","","<p>An enum {Field} in a {StructLayout}.\n"],["FFI::StructLayout::InnerStruct","","FFI/StructLayout/InnerStruct.html","",""],["FFI::StructLayout::Mapped","","FFI/StructLayout/Mapped.html","",""],["FFI::StructLayoutBuilder","","FFI/StructLayoutBuilder.html","","<p>Build a {StructLayout struct layout}.\n"],["FFI::Type","","FFI/Type.html","",""],["FFI::TypesGenerator","","FFI/TypesGenerator.html","","<p>@private\n"],["FFI::Union","","FFI/Union.html","",""],["FFI::VariadicInvoker","","FFI/VariadicInvoker.html","",""],["RbConfig","","RbConfig.html","",""],["unknown","","unknown.html","",""],["<<","FFI::Enums","FFI/Enums.html#method-i-3C-3C","(enum)","<p>@param [Enum] enum Add an {Enum} to the collection.\n"],["[]","FFI::ConstGenerator","FFI/ConstGenerator.html#method-i-5B-5D","(name)","<p>@param [String] name @return constant value (converted if a\n<code>converter</code> was defined). Access a constant …\n"],["[]","FFI::Enum","FFI/Enum.html#method-i-5B-5D","(query)","<p>Get a symbol or a value from the enum. @overload [](query)\n\n<pre>Get enum value from symbol.\n@param [Symbol] ...</pre>\n"],["__map_symbol","FFI::Enums","FFI/Enums.html#method-i-__map_symbol","(symbol)","<p>@param symbol a symbol to find in merge symbol maps of all enums. @return a\nsymbol\n"],["add","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-i-add","(name, type, offset = nil)","<p>@param [String, Symbol] name name of the field @param [Array,\nDataConverter, Struct, StructLayout::Field …\n"],["add_array","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-i-add_array","(name, type, count, offset = nil)","<p>@param name (see #add) @param type (see #add) @param [Numeric] count array\nlength @param offset (see …\n"],["add_field","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-i-add_field","(name, type, offset = nil)","<p>@param (see #add) @return (see #add) Same as {#add}. @see #add\n"],["add_struct","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-i-add_struct","(name, type, offset = nil)","<p>@param (see #add) @return (see #add) Add a struct as a field to the\nbuilder.\n"],["add_typedef","FFI","FFI.html#method-c-add_typedef","(old, add)","<p>(see FFI.typedef)\n"],["align","FFI::Struct","FFI/Struct.html#method-i-align","()",""],["aligned","FFI::Struct","FFI/Struct.html#method-i-aligned","(alignment = 1)",""],["alignment","FFI::Struct","FFI/Struct.html#method-c-alignment","()","<p>@return (see Struct#alignment)\n"],["alignment","FFI::Struct","FFI/Struct.html#method-i-alignment","()","<p>@return [Fixnum] Struct alignment\n"],["alignment=","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-i-alignment-3D","(align)","<p>@param [Numeric] alignment Set alignment attribute with\n<code>alignment</code> only if it is greater than attribute …\n"],["attach","FFI::VariadicInvoker","FFI/VariadicInvoker.html#method-i-attach","(mod, mname)","<p>Attach the invoker to module <code>mod</code> as <code>mname</code>\n"],["attach_function","FFI::Library","FFI/Library.html#method-i-attach_function","(name, func, args, returns = nil, options = nil)","<p>@overload attach_function(func, args, returns, options = {})\n\n<pre>@example attach function without an explicit ...</pre>\n"],["attach_variable","FFI::Library","FFI/Library.html#method-i-attach_variable","(mname, a1, a2 = nil)","<p>@overload attach_variable(mname, cname, type)\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@example</span>\n <span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Bar</span>\n   <span class=\"ruby-identifier\">extend</span> <span class=\"ruby-constant\">FFI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Library</span>\n   <span class=\"ruby-identifier\">ffi_lib</span> <span class=\"ruby-string\">'my_lib'</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["auto_ptr","FFI::Struct","FFI/Struct.html#method-c-auto_ptr","()",""],["autorelease=","FFI::AutoPointer","FFI/AutoPointer.html#method-i-autorelease-3D","(autorelease)","<p>@param [Boolean] autorelease @return [Boolean] <code>autorelease</code> Set\n<code>autorelease</code> property. See {Pointer Autorelease …\n"],["autorelease?","FFI::AutoPointer","FFI/AutoPointer.html#method-i-autorelease-3F","()","<p>@return [Boolean] <code>autorelease</code> Get <code>autorelease</code>\nproperty. See {Pointer Autorelease section at Pointer}. …\n"],["bsd?","FFI::Platform","FFI/Platform.html#method-c-bsd-3F","()","<p>Test if current OS is a *BSD (include MAC) @return [Boolean]\n"],["build","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-i-build","()","<p>@return [StructLayout] Build and return the struct layout.\n"],["builder","FFI::Union","FFI/Union.html#method-c-builder","()",""],["by_ref","FFI::Struct","FFI/Struct.html#method-c-by_ref","(flags = :inout)",""],["by_value","FFI::Struct","FFI/Struct.html#method-c-by_value","()",""],["calculate","FFI::ConstGenerator","FFI/ConstGenerator.html#method-i-calculate","(options = {})","<p>Calculate constants values. @param [Hash] options @option options [String]\n:cppflags flags for C compiler …\n"],["calculate","FFI::StructGenerator","FFI/StructGenerator.html#method-i-calculate","(options = {})",""],["call","FFI::AutoPointer::Releaser","FFI/AutoPointer/Releaser.html#method-i-call","(*args)","<p>@param args Release pointer if <code>autorelease</code> is set.\n"],["call","FFI::VariadicInvoker","FFI/VariadicInvoker.html#method-i-call","(*args, &block)",""],["callback","FFI::Library","FFI/Library.html#method-i-callback","(*args)","<p>@overload callback(name, params, ret) @overload callback(params, ret)\n@param name callback name to add …\n"],["callback","FFI::Struct","FFI/Struct.html#method-i-callback","(params, ret)",""],["clear","FFI::Struct","FFI/Struct.html#method-i-clear","()","<p>Clear the struct content. @return [self]\n"],["const","FFI::ConstGenerator","FFI/ConstGenerator.html#method-i-const","(name, format = nil, cast = '', ruby_name = nil, converter = nil, &converter_proc)","<p>Request the value for C constant <code>name</code>.\n<p>@param [#to_s] name C constant name @param [String] format a printf …\n"],["constants","FFI::Generator","FFI/Generator.html#method-i-constants","(options = {}, &block)",""],["converted_value","FFI::ConstGenerator::Constant","FFI/ConstGenerator/Constant.html#method-i-converted_value","()","<p>Return constant value (converted if a <code>converter</code> was defined).\n@return constant value.\n"],["dump_config","FFI::StructGenerator","FFI/StructGenerator.html#method-i-dump_config","(io)",""],["dump_constants","FFI::ConstGenerator","FFI/ConstGenerator.html#method-i-dump_constants","(io)","<p>Dump constants to <code>io</code>. @param [#puts] io @return [nil]\n"],["enclosing_module","FFI::Struct","FFI/Struct.html#method-i-enclosing_module","()",""],["enum","FFI::Library","FFI/Library.html#method-i-enum","(*args)","<p>@overload enum(name, values)\n\n<pre>Create a named enum.\n@example\n enum :foo, [:zero, :one, :two]  # named enum ...</pre>\n"],["enum_type","FFI::Library","FFI/Library.html#method-i-enum_type","(name)","<p>@param name @return [FFI::Enum] Find an enum by name.\n"],["enum_value","FFI::Library","FFI/Library.html#method-i-enum_value","(symbol)","<p>@param symbol @return [FFI::Enum] Find an enum by a symbol it contains.\n"],["errno","FFI","FFI.html#method-c-errno","()","<p>@return (see FFI::LastError.error) @see FFI::LastError.error\n"],["errno=","FFI","FFI.html#method-c-errno-3D","(error)","<p>@param error (see FFI::LastError.error=) @return (see\nFFI::LastError.error=) @see FFI::LastError.error= …\n"],["extended","FFI::Library","FFI/Library.html#method-c-extended","(mod)","<p>@param mod extended object @return [nil] @raise {RuntimeError} if\n<code>mod</code> is not a Module Test if extended …\n"],["ffi_convention","FFI::Library","FFI/Library.html#method-i-ffi_convention","(convention = nil)","<p>Set the calling convention for {#attach_function} and {#callback}\n<p>@see en.wikipedia.org/wiki/Stdcall#stdcall …\n"],["ffi_lib","FFI::Library","FFI/Library.html#method-i-ffi_lib","(*names)","<p>@param [Array] names names of libraries to load @return\n[Array&lt;DynamicLibrary&gt;] @raise {LoadError} …\n"],["ffi_lib_flags","FFI::Library","FFI/Library.html#method-i-ffi_lib_flags","(*flags)","<p>Sets library flags for {#ffi_lib}.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ffi_lib_flags</span>(:<span class=\"ruby-identifier\">lazy</span>, :<span class=\"ruby-identifier\">local</span>) <span class=\"ruby-comment\"># =&gt; 5</span>\n</pre>\n"],["ffi_libraries","FFI::Library","FFI/Library.html#method-i-ffi_libraries","()","<p>@see #ffi_lib @return [Array&lt;FFI::DynamicLibrary&gt;] array of currently\nloaded FFI libraries @raise …\n"],["field","FFI::StructGenerator","FFI/StructGenerator.html#method-i-field","(name, type=nil)",""],["find","FFI::Enum","FFI/Enum.html#method-i-find","(query)",""],["find","FFI::Enums","FFI/Enums.html#method-i-find","(query)","<p>@param query enum tag or part of an enum name @return [Enum] Find a {Enum}\nin collection.\n"],["find_field_type","FFI::Struct","FFI/Struct.html#method-i-find_field_type","(type, mod = enclosing_module)",""],["find_type","FFI","FFI.html#method-c-find_type","(name, type_map = nil)","<p>@param [Type, DataConverter, Symbol] name @param [Hash] type_map if nil,\n{FFI::TypeDefs} is used @return …\n"],["find_type","FFI::Library","FFI/Library.html#method-i-find_type","(t)","<p>@param [DataConverter, Type, Struct, Symbol] t type to find @return [Type]\nFind a type definition.\n"],["find_type","FFI::Struct","FFI/Struct.html#method-i-find_type","(type, mod = enclosing_module)",""],["for_fd","FFI::IO","FFI/IO.html#method-c-for_fd","(fd, mode = \"r\")","<p>@param [Integer] fd file decriptor @param [String] mode mode string @return\n[::IO] Synonym for IO::for_fd …\n"],["found?","FFI::StructGenerator","FFI/StructGenerator.html#method-i-found-3F","()",""],["free","FFI::AutoPointer","FFI/AutoPointer.html#method-i-free","()","<p>@return [nil] Free the pointer.\n"],["free","FFI::AutoPointer::Releaser","FFI/AutoPointer/Releaser.html#method-i-free","()","<p>@return [nil] Free pointer.\n"],["from_native","FFI::AutoPointer","FFI/AutoPointer.html#method-c-from_native","(val, ctx)","<p>Create a new AutoPointer.\n<p>Override {DataConverter#from_native}. @overload self.from_native(ptr, ctx)\n@param …\n"],["from_native","FFI::Enum","FFI/Enum.html#method-i-from_native","(val, ctx)","<p>@param val @return symbol name if it exists for <code>val</code>.\n"],["from_native","FFI::StrPtrConverter","FFI/StrPtrConverter.html#method-c-from_native","(val, ctx)","<p>@param [Pointer] val @param [] ctx @return [Array(String, Pointer)] Returns\na [ String, Pointer ] tuple …\n"],["from_native","FFI::Struct::ManagedStructConverter","FFI/Struct/ManagedStructConverter.html#method-i-from_native","(ptr, ctx)","<p>@param [Pointer] ptr @param [nil] ctx @return [Struct]\n"],["function_names","FFI::Library","FFI/Library.html#method-i-function_names","(name, arg_types)","<p>@param [#to_s] name function name @param [Array] arg_types function’s\nargument types @return [Array&lt;String&gt;] …\n"],["generate","FFI::TypesGenerator","FFI/TypesGenerator.html#method-c-generate","(options = {})",""],["generate_layout","FFI::StructGenerator","FFI/StructGenerator.html#method-i-generate_layout","()",""],["get","FFI::StructLayout::Enum","FFI/StructLayout/Enum.html#method-i-get","(ptr)","<p>@param [AbstractMemory] ptr pointer on a {Struct} @return [Object] Get an\nobject of type {#type} from …\n"],["get","FFI::StructLayout::InnerStruct","FFI/StructLayout/InnerStruct.html#method-i-get","(ptr)",""],["get","FFI::StructLayout::Mapped","FFI/StructLayout/Mapped.html#method-i-get","(ptr)",""],["get_field","FFI::StructGenerator","FFI/StructGenerator.html#method-i-get_field","(name)",""],["in","FFI::Struct","FFI/Struct.html#method-c-in","()",""],["include","FFI::ConstGenerator","FFI/ConstGenerator.html#method-i-include","(*i)","<p>Add additional C include file(s) to calculate constants from. @note\n<code>stdio.h</code> and <code>stddef.h</code> automatically …\n"],["include","FFI::StructGenerator","FFI/StructGenerator.html#method-i-include","(i)",""],["init","FFI::VariadicInvoker","FFI/VariadicInvoker.html#method-i-init","(arg_types, type_map)",""],["layout","FFI::Struct","FFI/Struct.html#method-i-layout","(*spec)","<p>@return [StructLayout] @overload layout\n\n<pre>@return [StructLayout]\nGet struct layout.</pre>\n<p>@overload layout(*spec) …\n"],["mac?","FFI::Platform","FFI/Platform.html#method-c-mac-3F","()","<p>Test if current OS is Mac OS @return [Boolean]\n"],["map_library_name","FFI","FFI.html#method-c-map_library_name","(lib)","<p>@param [#to_s] lib library name @return [String] library name formatted for\ncurrent platform Transform …\n"],["members","FFI::Struct","FFI/Struct.html#method-i-members","()","<p>(see FFI::StructLayout#members)\n"],["members","FFI::Struct","FFI/Struct.html#method-c-members","()","<p>(see FFI::Type#members)\n"],["name","FFI::StructGenerator","FFI/StructGenerator.html#method-i-name","(n)",""],["native_read","FFI::IO","FFI/IO.html#method-c-native_read","(io, buf, len)","<p>@param [#read] io io to read from @param [AbstractMemory] buf destination\nfor data read from <code>io</code> @param …\n"],["native_type","FFI::AutoPointer","FFI/AutoPointer.html#method-c-native_type","()","<p>Return native type of AutoPointer.\n<p>Override {DataConverter#native_type}. @return [Type::POINTER] @raise …\n"],["native_type","FFI::Enum","FFI/Enum.html#method-i-native_type","()","<p>Get native type of Enum @return [Type::INT]\n"],["new","FFI::AutoPointer","FFI/AutoPointer.html#method-c-new","(ptr, proc=nil, &block)","<p>@overload initialize(pointer, method)\n\n<pre>@param [Pointer] pointer\n@param [Method] method\n@return [self]\nThe ...</pre>\n"],["new","FFI::AutoPointer::Releaser","FFI/AutoPointer/Releaser.html#method-c-new","(ptr, proc)","<p>@param [Pointer] ptr @param [#call] proc @return [nil] A new instance of\nReleaser.\n"],["new","FFI::ConstGenerator","FFI/ConstGenerator.html#method-c-new","(prefix = nil, options = {})","<p>Creates a new constant generator that uses <code>prefix</code> as a name,\nand an options hash.\n<p>The only option is  …\n"],["new","FFI::ConstGenerator::Constant","FFI/ConstGenerator/Constant.html#method-c-new","(name, format, cast, ruby_name = nil, converter=nil)","<p>@param [#to_s] name @param [String] format a printf format string to print\nthe value out @param [String] …\n"],["new","FFI::Enum","FFI/Enum.html#method-c-new","(info, tag=nil)","<p>@param [nil, Enumerable] info @param tag enum tag\n"],["new","FFI::Enums","FFI/Enums.html#method-c-new","()","<p>@return [nil]\n"],["new","FFI::Generator","FFI/Generator.html#method-c-new","(ffi_name, rb_name, options = {})",""],["new","FFI::Generator::Task","FFI/Generator/Task.html#method-c-new","(rb_names)",""],["new","FFI::ManagedStruct","FFI/ManagedStruct.html#method-c-new","(pointer=nil)","<p>@overload initialize(pointer)\n\n<pre>@param [Pointer] pointer\nCreate a new ManagedStruct which will invoke the ...</pre>\n"],["new","FFI::NotFoundError","FFI/NotFoundError.html#method-c-new","(function, *libraries)",""],["new","FFI::Struct::ManagedStructConverter","FFI/Struct/ManagedStructConverter.html#method-c-new","(struct_class)","<p>@param [Struct] struct_class\n"],["new","FFI::StructGenerator","FFI/StructGenerator.html#method-c-new","(name, options = {})",""],["new","FFI::StructGenerator::Field","FFI/StructGenerator/Field.html#method-c-new","(name, type)",""],["new","FFI::StructLayout::Mapped","FFI/StructLayout/Mapped.html#method-c-new","(name, offset, type, orig_field)",""],["new","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-c-new","()",""],["offset=","FFI::StructGenerator::Field","FFI/StructGenerator/Field.html#method-i-offset-3D","(o)",""],["offset_of","FFI::Struct","FFI/Struct.html#method-c-offset_of","(name)","<p>(see FFI::StructLayout#offset_of)\n"],["offset_of","FFI::Struct","FFI/Struct.html#method-i-offset_of","(name)","<p>(see FFI::StructLayout#offset_of)\n"],["offset_of","FFI::StructLayout","FFI/StructLayout.html#method-i-offset_of","(field_name)","<p>@return [Numeric] Get the offset of a field.\n"],["offsets","FFI::Struct","FFI/Struct.html#method-i-offsets","()","<p>(see FFI::StructLayout#offsets)\n"],["offsets","FFI::Struct","FFI/Struct.html#method-c-offsets","()","<p>(see FFI::StructLayout#offsets)\n"],["offsets","FFI::StructLayout","FFI/StructLayout.html#method-i-offsets","()","<p>@return [Array&lt;Array(Symbol, Numeric)&gt; Get an array of tuples (field\nname, offset of the field). …\n"],["options","FFI::ConstGenerator","FFI/ConstGenerator.html#method-c-options","()","<p>Get class options. @return [Hash] class options\n"],["options","FFI::StructGenerator","FFI/StructGenerator.html#method-c-options","()",""],["options=","FFI::ConstGenerator","FFI/ConstGenerator.html#method-c-options-3D","(options)","<p>Set class options These options are merged with {#initialize} options when\nit is called with a block. …\n"],["options=","FFI::StructGenerator","FFI/StructGenerator.html#method-c-options-3D","(options)",""],["out","FFI::Struct","FFI/Struct.html#method-c-out","()",""],["packed","FFI::Struct","FFI/Struct.html#method-i-packed","(packed = 1)",""],["packed=","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-i-packed-3D","(packed)","<p>Set packed attribute @overload packed=(packed)\n\n<pre>@param [Fixnum] packed\n@return [packed]\nSet alignment and ...</pre>\n"],["ptr","FFI::Struct","FFI/Struct.html#method-c-ptr","(flags = :inout)",""],["put","FFI::StructLayout::Enum","FFI/StructLayout/Enum.html#method-i-put","(ptr, value)","<p>@param [AbstractMemory] ptr pointer on a {Struct} @param  value @return\n[nil] Set <code>value</code> into memory pointed …\n"],["put","FFI::StructLayout::InnerStruct","FFI/StructLayout/InnerStruct.html#method-i-put","(ptr, value)",""],["put","FFI::StructLayout::Mapped","FFI/StructLayout/Mapped.html#method-i-put","(ptr, value)",""],["read_array_of_type","FFI::Pointer","FFI/Pointer.html#method-i-read_array_of_type","(type, reader, length)","<p>@param [Type] type type of data to read from pointer’s contents @param\n[Symbol] reader method to send …\n"],["read_string","FFI::Pointer","FFI/Pointer.html#method-i-read_string","(len=nil)","<p>@param [nil,Numeric] len length of string to return @return [String] Read\npointer’s contents as a string, …\n"],["read_string_length","FFI::Pointer","FFI/Pointer.html#method-i-read_string_length","(len)","<p>@param [Numeric] len length of string to return @return [String] Read the\nfirst <code>len</code> bytes of pointer’s …\n"],["read_string_to_null","FFI::Pointer","FFI/Pointer.html#method-i-read_string_to_null","()","<p>@return [String] Read pointer’s contents as a string.\n<p>Same as:\n\n<pre>ptr.read_string  # with no len</pre>\n"],["release","FFI::AutoPointer::CallableReleaser","FFI/AutoPointer/CallableReleaser.html#method-i-release","(ptr)","<p>@param [Pointer] ptr @return [nil] Release <code>ptr</code> by using Proc\nor Method defined at <code>ptr</code> {AutoPointer#initialize …\n"],["release","FFI::AutoPointer::DefaultReleaser","FFI/AutoPointer/DefaultReleaser.html#method-i-release","(ptr)","<p>@param [Pointer] ptr @return [nil] Release <code>ptr</code> by using his\n#release class method.\n"],["ruby_name","FFI::ConstGenerator::Constant","FFI/ConstGenerator/Constant.html#method-i-ruby_name","()","<p>get constant ruby name @return [String]\n"],["size","FFI::Pointer","FFI/Pointer.html#method-c-size","()","<p>Return the size of a pointer on the current platform, in bytes @return\n[Numeric]\n"],["size","FFI::Struct","FFI/Struct.html#method-i-size","()","<p>Get struct size @return [Numeric]\n"],["size","FFI::Struct","FFI/Struct.html#method-c-size","()","<p>Get struct size @return [Numeric]\n"],["size=","FFI::Struct","FFI/Struct.html#method-c-size-3D","(size)","<p>set struct size @param [Numeric] size @return [size]\n"],["size=","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-i-size-3D","(size)","<p>@param [Numeric] size Set size attribute with <code>size</code> only if\n<code>size</code> is greater than attribute value.\n"],["struct","FFI::Generator","FFI/Generator.html#method-i-struct","(options = {}, &block)",""],["symbol_map","FFI::Enum","FFI/Enum.html#method-i-symbol_map","()","<p>Get the symbol map. @return [Hash]\n"],["symbols","FFI::Enum","FFI/Enum.html#method-i-symbols","()","<p>@return [Array] enum symbol names\n"],["to_config","FFI::StructGenerator::Field","FFI/StructGenerator/Field.html#method-i-to_config","(name)",""],["to_h","FFI::Enum","FFI/Enum.html#method-i-to_h","()",""],["to_hash","FFI::Enum","FFI/Enum.html#method-i-to_hash","()",""],["to_native","FFI::Enum","FFI/Enum.html#method-i-to_native","(val, ctx)","<p>@param [Symbol, Integer, #to_int] val @param ctx unused @return [Integer]\nvalue of a enum symbol\n"],["to_ptr","FFI::Struct","FFI/Struct.html#method-i-to_ptr","()","<p>Get {Pointer} to struct content. @return [AbstractMemory]\n"],["to_ruby","FFI::ConstGenerator","FFI/ConstGenerator.html#method-i-to_ruby","()","<p>Outputs values for discovered constants.  If the constant’s value was not\ndiscovered it is not omitted. …\n"],["to_ruby","FFI::ConstGenerator::Constant","FFI/ConstGenerator/Constant.html#method-i-to_ruby","()","<p>Get an evaluable string from constant. @return [String]\n"],["to_s","FFI::Generator","FFI/Generator.html#method-i-to_s","()","<p>Utility converter for constants\n"],["type_size","FFI","FFI.html#method-c-type_size","(type)","<p>@param type <code>type</code> is an instance of class accepted by\n{FFI.find_type} @return [Numeric] Get <code>type</code> size, …\n"],["typedef","FFI","FFI.html#method-c-typedef","(old, add)","<p>@param [Type, DataConverter, Symbol] old type definition used by\n{FFI.find_type} @param [Symbol] add …\n"],["typedef","FFI::Library","FFI/Library.html#method-i-typedef","(old, add, info=nil)","<p>@param [DataConverter, Symbol, Type] old @param  add @param [] info @return\n[FFI::Enum, FFI::Type] Register …\n"],["union=","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-i-union-3D","(is_union)","<p>@param [Boolean] is_union @return [is_union] Set union attribute. Set to\n<code>true</code> to build a {Union} instead …\n"],["union?","FFI::StructLayoutBuilder","FFI/StructLayoutBuilder.html#method-i-union-3F","()","<p>@return [Boolean] Building a {Union} or a {Struct} ?\n"],["unix?","FFI::Platform","FFI/Platform.html#method-c-unix-3F","()","<p>Test if current OS is a unix OS @return [Boolean]\n"],["val","FFI::Struct","FFI/Struct.html#method-c-val","()",""],["values","FFI::Struct","FFI/Struct.html#method-i-values","()","<p>@return [Array] Get array of values from Struct fields.\n"],["windows?","FFI::Platform","FFI/Platform.html#method-c-windows-3F","()","<p>Test if current OS is Windows @return [Boolean]\n"],["write_array_of_type","FFI::Pointer","FFI/Pointer.html#method-i-write_array_of_type","(type, writer, ary)","<p>@param [Type] type type of data to write to pointer’s contents @param\n[Symbol] writer method to send …\n"],["write_string","FFI::Pointer","FFI/Pointer.html#method-i-write_string","(str, len=nil)","<p>@param [String] str string to write @param [Numeric] len length of string\nto return @return [self] Write …\n"],["write_string_length","FFI::Pointer","FFI/Pointer.html#method-i-write_string_length","(str, len)","<p>@param [String] str string to write @param [Numeric] len length of string\nto return @return [self] Write …\n"],["ChangeLog","","ext/ffi_c/libffi/ChangeLog.html","","<p>ChangeLog\n<p>2011-08-22\n<p>2011-08-22  Jasper Lievisse Adriaanse &lt;jasper@openbsd.org&gt;\n"],["ChangeLog.libffi","","ext/ffi_c/libffi/ChangeLog_libffi.html","","<p>ChangeLog.libffi\n<p>2011-02-08\n<p>2011-02-08  Andreas Tobler  &lt;andreast@fgznet.ch&gt;\n"],["ChangeLog.libgcj","","ext/ffi_c/libffi/ChangeLog_libgcj.html","","<p>ChangeLog.libgcj\n<p>2004-01-14\n<p>2004-01-14  Kelley Cook  &lt;kcook@gcc.gnu.org&gt;\n"],["ChangeLog.v1","","ext/ffi_c/libffi/ChangeLog_v1.html","","<p>ChangeLog.v1\n<p>1998-10-05\n<p>Mon Oct  5 02:17:50 1998  Anthony Green  &lt;green@cygnus.com&gt;\n"],["LICENSE","","ext/ffi_c/libffi/LICENSE.html","","<p>libffi - Copyright © 1996-2011  Anthony Green, Red Hat, Inc and others. See\nsource files for details. …\n"],["Makefile.am","","ext/ffi_c/libffi/Makefile_am.html","","<p>## Process this with automake to create Makefile.in\n<p>AUTOMAKE_OPTIONS = foreign subdir-objects\n<p>SUBDIRS = …\n"],["Makefile.in","","ext/ffi_c/libffi/Makefile_in.html","","<p># Makefile.in generated by automake 1.11.1 from Makefile.am. #\n@configure_input@\n<p># Copyright (C) 1994, …\n"],["Makefile.vc","","ext/ffi_c/libffi/Makefile_vc.html","","<p># # ==================================================================== #\n# libffi Windows Makefile …\n"],["Makefile.vc64","","ext/ffi_c/libffi/Makefile_vc64.html","","<p># # ==================================================================== #\n# libffi Windows Makefile …\n"],["README","","ext/ffi_c/libffi/README.html","","<p>Status\n<p>\n<p>libffi-3.0.10 was released on August 23, 2011. Check the libffi web page\nfor updates: &lt;URL: …\n"],["acinclude.m4","","ext/ffi_c/libffi/acinclude_m4.html","","<p># mmap(2) blacklisting.  Some platforms provide the mmap library routine #\nbut don’t support all of the …\n"],["build-ios.sh","","ext/ffi_c/libffi/build-ios_sh.html","","<p>#!/bin/sh\n<p>PLATFORM_IOS=/Developer/Platforms/iPhoneOS.platform/\nPLATFORM_IOS_SIM=/Developer/Platforms/iPhoneSimulator.platform/ …\n"],["compile","","ext/ffi_c/libffi/compile.html","","<p>#! /bin/sh # Wrapper for compilers which do not understand `-c -o’.\n<p>scriptversion=2009-10-06.20; # UTC …\n"],["config.guess","","ext/ffi_c/libffi/config_guess.html","","<p>#! /bin/sh # Attempt to guess a canonical system name. #   Copyright (C)\n1992, 1993, 1994, 1995, 1996, …\n"],["config.sub","","ext/ffi_c/libffi/config_sub.html","","<p>#! /bin/sh # Configuration validation subroutine script. #   Copyright (C)\n1992, 1993, 1994, 1995, 1996, …\n"],["configure","","ext/ffi_c/libffi/configure.html","","<p>#! /bin/sh # Guess values for system-dependent variables and create\nMakefiles. # Generated by GNU Autoconf …\n"],["configure.ac","","ext/ffi_c/libffi/configure_ac.html","","<p>dnl Process this with autoconf to create configure\n<p>AC_PREREQ(2.63)\n<p>AC_INIT(, [3.0.10], [sourceware.org/libffi.html …\n"],["configure.host","","ext/ffi_c/libffi/configure_host.html","","<p># configure.host # # This shell script handles all host based configuration\nfor libffi. #\n<p># THIS TABLE …\n"],["depcomp","","ext/ffi_c/libffi/depcomp.html","","<p>#! /bin/sh # depcomp - compile a program generating dependencies as\nside-effects\n<p>scriptversion=2009-04-28.21; …\n"],["libffi.info","","ext/ffi_c/libffi/doc/libffi_info.html","","<p>This is ../libffi/doc/libffi.info, produced by makeinfo version 4.13 from\n../libffi/doc/libffi.texi. …\n"],["stamp-vti","","ext/ffi_c/libffi/doc/stamp-vti.html","","<p>@set UPDATED 23 August 2011 @set UPDATED-MONTH August 2011 @set EDITION\n3.0.10 @set VERSION 3.0.10\n"],["version.texi","","ext/ffi_c/libffi/doc/version_texi.html","","<p>@set UPDATED 23 August 2011 @set UPDATED-MONTH August 2011 @set EDITION\n3.0.10 @set VERSION 3.0.10\n"],["fficonfig.h.in","","ext/ffi_c/libffi/fficonfig_h_in.html","","\n<pre>fficonfig.h.in.  Generated from configure.ac by autoheader.    \n\nDefine if building universal (internal ...</pre>\n"],["Makefile.am","","ext/ffi_c/libffi/include/Makefile_am.html","","<p>## Process this with automake to create Makefile.in\n<p>AUTOMAKE_OPTIONS=foreign\n<p>DISTCLEANFILES=ffitarget.h …\n"],["Makefile.in","","ext/ffi_c/libffi/include/Makefile_in.html","","<p># Makefile.in generated by automake 1.11.1 from Makefile.am. #\n@configure_input@\n<p># Copyright (C) 1994, …\n"],["install-sh","","ext/ffi_c/libffi/install-sh.html","","<p>#!/bin/sh # install - install a program, script, or datafile\n<p>scriptversion=2009-04-28.21; # UTC\n<p># This …\n"],["libffi.pc.in","","ext/ffi_c/libffi/libffi_pc_in.html","","<p>prefix=@prefix@ exec_prefix=@exec_prefix@ libdir=@libdir@\nincludedir=${libdir}/@PACKAGE_NAME@-@PACKAGE_VERSION@/include …\n"],["libtool-version","","ext/ffi_c/libffi/libtool-version.html","","<p># This file is used to maintain libtool version info for libffi.  See # the\nlibtool manual to understand …\n"],["ltmain.sh","","ext/ffi_c/libffi/ltmain_sh.html","","<p># libtool (GNU libtool) 2.4 # Written by Gordon Matzigkeit\n&lt;gord@gnu.ai.mit.edu&gt;, 1996\n<p># Copyright …\n"],["ax_cc_maxopt.m4","","ext/ffi_c/libffi/m4/ax_cc_maxopt_m4.html","","<p>#\n===========================================================================\n#       www.gnu.org/software/autoconf-archive/ax_cc_maxopt.html …\n"],["ax_cflags_warn_all.m4","","ext/ffi_c/libffi/m4/ax_cflags_warn_all_m4.html","","<p>#\n===========================================================================\n#    www.gnu.org/software/autoconf-archive/ax_cflags_warn_all.html …\n"],["ax_check_compiler_flags.m4","","ext/ffi_c/libffi/m4/ax_check_compiler_flags_m4.html","","<p>#\n===========================================================================\n#  www.gnu.org/software/autoconf-archive/ax_check_compiler_flags.html …\n"],["ax_compiler_vendor.m4","","ext/ffi_c/libffi/m4/ax_compiler_vendor_m4.html","","<p>#\n===========================================================================\n#    www.gnu.org/software/autoconf-archive/ax_compiler_vendor.html …\n"],["ax_configure_args.m4","","ext/ffi_c/libffi/m4/ax_configure_args_m4.html","","<p>#\n===========================================================================\n#     www.gnu.org/software/autoconf-archive/ax_configure_args.html …\n"],["ax_enable_builddir.m4","","ext/ffi_c/libffi/m4/ax_enable_builddir_m4.html","","<p>#\n===========================================================================\n#    www.gnu.org/software/autoconf-archive/ax_enable_builddir.html …\n"],["ax_gcc_archflag.m4","","ext/ffi_c/libffi/m4/ax_gcc_archflag_m4.html","","<p>#\n===========================================================================\n#      www.gnu.org/software/autoconf-archive/ax_gcc_archflag.html …\n"],["ax_gcc_x86_cpuid.m4","","ext/ffi_c/libffi/m4/ax_gcc_x86_cpuid_m4.html","","<p>#\n===========================================================================\n#     www.gnu.org/software/autoconf-archive/ax_gcc_x86_cpuid.html …\n"],["Makefile.am","","ext/ffi_c/libffi/man/Makefile_am.html","","<p>## Process this with automake to create Makefile.in\n<p>AUTOMAKE_OPTIONS=foreign\n<p>EXTRA_DIST = ffi.3 ffi_call.3 …\n"],["Makefile.in","","ext/ffi_c/libffi/man/Makefile_in.html","","<p># Makefile.in generated by automake 1.11.1 from Makefile.am. #\n@configure_input@\n<p># Copyright (C) 1994, …\n"],["ffi.3","","ext/ffi_c/libffi/man/ffi_3.html","","<p>.Dd February 15, 2008 .Dt FFI 3 .Sh NAME .Nm FFI .Nd Foreign Function\nInterface .Sh LIBRARY libffi, -lffi …\n"],["ffi_call.3","","ext/ffi_c/libffi/man/ffi_call_3.html","","<p>.Dd February 15, 2008 .Dt ffi_call 3 .Sh NAME .Nm ffi_call .Nd Invoke a\nforeign function. .Sh SYNOPSIS …\n"],["ffi_prep_cif.3","","ext/ffi_c/libffi/man/ffi_prep_cif_3.html","","<p>.Dd February 15, 2008 .Dt ffi_prep_cif 3 .Sh NAME .Nm ffi_prep_cif .Nd\nPrepare a .Nm ffi_cif structure …\n"],["mdate-sh","","ext/ffi_c/libffi/mdate-sh.html","","<p>#!/bin/sh # Get modification time of a file or directory and pretty-print\nit.\n<p>scriptversion=2005-06-29.22 …\n"],["missing","","ext/ffi_c/libffi/missing.html","","<p>#! /bin/sh # Common stub for a few missing GNU programs while installing.\n<p>scriptversion=2009-04-28.21; …\n"],["msvcc.sh","","ext/ffi_c/libffi/msvcc_sh.html","","<p>#!/bin/sh\n<p># ***** BEGIN LICENSE BLOCK ***** # Version: MPL 1.1/GPL 2.0/LGPL 2.1 # #\nThe contents of this …\n"],["osf.S","","ext/ffi_c/libffi/src/alpha/osf_S.html","","\n<pre>-----------------------------------------------------------------------\nosf.S - Copyright (c) 1998, 2001, ...</pre>\n"],["gentramp.sh","","ext/ffi_c/libffi/src/arm/gentramp_sh.html","","<p>#!/bin/sh\n<p># ———————————————————————– #  gentramp.sh -  …\n"],["sysv.S","","ext/ffi_c/libffi/src/arm/sysv_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.S - Copyright (c) 1998, ...</pre>\n"],["trampoline.S","","ext/ffi_c/libffi/src/arm/trampoline_S.html","","<p># GENERATED CODE - DO NOT EDIT # This file was generated by ./gentramp.sh\n<p>#  Copyright © 2010, Plausible …\n"],["sysv.S","","ext/ffi_c/libffi/src/avr32/sysv_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.S - Copyright (c) 2009  ...</pre>\n"],["sysv.S","","ext/ffi_c/libffi/src/cris/sysv_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.S - Copyright (c) 2004 Simon ...</pre>\n"],["eabi.S","","ext/ffi_c/libffi/src/frv/eabi_S.html","","\n<pre>-----------------------------------------------------------------------\neabi.S - Copyright (c) 2004  ...</pre>\n"],["unix.S","","ext/ffi_c/libffi/src/ia64/unix_S.html","","\n<pre>-----------------------------------------------------------------------\nunix.S - Copyright (c) 1998, ...</pre>\n"],["sysv.S","","ext/ffi_c/libffi/src/m32r/sysv_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.S - Copyright (c) 2004 Renesas ...</pre>\n"],["sysv.S","","ext/ffi_c/libffi/src/m68k/sysv_S.html","","\n<pre>-----------------------------------------------------------------------\n\nsysv.S - Copyright (c) 1998 ...</pre>\n"],["n32.S","","ext/ffi_c/libffi/src/mips/n32_S.html","","\n<pre>-----------------------------------------------------------------------\nn32.S - Copyright (c) 1996, 1998, ...</pre>\n"],["o32.S","","ext/ffi_c/libffi/src/mips/o32_S.html","","\n<pre>-----------------------------------------------------------------------\no32.S - Copyright (c) 1996, 1998, ...</pre>\n"],["eabi.S","","ext/ffi_c/libffi/src/moxie/eabi_S.html","","\n<pre>-----------------------------------------------------------------------\neabi.S - Copyright (c) 2004  ...</pre>\n"],["hpux32.S","","ext/ffi_c/libffi/src/pa/hpux32_S.html","","\n<pre>-----------------------------------------------------------------------\nhpux32.S - Copyright (c) 2006 ...</pre>\n"],["linux.S","","ext/ffi_c/libffi/src/pa/linux_S.html","","\n<pre>-----------------------------------------------------------------------\nlinux.S - (c) 2003-2004 Randolph ...</pre>\n"],["aix.S","","ext/ffi_c/libffi/src/powerpc/aix_S.html","","\n<pre>-----------------------------------------------------------------------\naix.S - Copyright (c) 2002, 2009 ...</pre>\n"],["aix_closure.S","","ext/ffi_c/libffi/src/powerpc/aix_closure_S.html","","\n<pre>-----------------------------------------------------------------------\naix_closure.S - Copyright (c) ...</pre>\n"],["darwin.S","","ext/ffi_c/libffi/src/powerpc/darwin_S.html","","\n<pre>-----------------------------------------------------------------------\ndarwin.S - Copyright (c) 2000 ...</pre>\n"],["darwin_closure.S","","ext/ffi_c/libffi/src/powerpc/darwin_closure_S.html","","\n<pre>-----------------------------------------------------------------------\ndarwin_closure.S - Copyright ...</pre>\n"],["linux64.S","","ext/ffi_c/libffi/src/powerpc/linux64_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.h - Copyright (c) 2003 Jakub ...</pre>\n"],["linux64_closure.S","","ext/ffi_c/libffi/src/powerpc/linux64_closure_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.h - Copyright (c) 2003 Jakub ...</pre>\n"],["ppc_closure.S","","ext/ffi_c/libffi/src/powerpc/ppc_closure_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.h - Copyright (c) 2003 Jakub ...</pre>\n"],["sysv.S","","ext/ffi_c/libffi/src/powerpc/sysv_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.S - Copyright (c) 1998 Geoffrey ...</pre>\n"],["sysv.S","","ext/ffi_c/libffi/src/s390/sysv_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.S - Copyright (c) 2000 Software ...</pre>\n"],["sysv.S","","ext/ffi_c/libffi/src/sh/sysv_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.S - Copyright (c) 2002, ...</pre>\n"],["sysv.S","","ext/ffi_c/libffi/src/sh64/sysv_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.S - Copyright (c) 2003, ...</pre>\n"],["v8.S","","ext/ffi_c/libffi/src/sparc/v8_S.html","","\n<pre>-----------------------------------------------------------------------\nv8.S - Copyright (c) 1996, 1997, ...</pre>\n"],["v9.S","","ext/ffi_c/libffi/src/sparc/v9_S.html","","\n<pre>-----------------------------------------------------------------------\nv9.S - Copyright (c) 2000, 2003, ...</pre>\n"],["darwin.S","","ext/ffi_c/libffi/src/x86/darwin_S.html","","\n<pre>-----------------------------------------------------------------------\ndarwin.S - Copyright (c) 1996, ...</pre>\n"],["darwin64.S","","ext/ffi_c/libffi/src/x86/darwin64_S.html","","\n<pre>-----------------------------------------------------------------------\ndarwin64.S - Copyright (c) 2006 ...</pre>\n"],["freebsd.S","","ext/ffi_c/libffi/src/x86/freebsd_S.html","","\n<pre>-----------------------------------------------------------------------\nfreebsd.S - Copyright (c) 1996, ...</pre>\n"],["sysv.S","","ext/ffi_c/libffi/src/x86/sysv_S.html","","\n<pre>-----------------------------------------------------------------------\nsysv.S - Copyright (c) 1996, ...</pre>\n"],["unix64.S","","ext/ffi_c/libffi/src/x86/unix64_S.html","","\n<pre>-----------------------------------------------------------------------\nunix64.S - Copyright (c) 2002 ...</pre>\n"],["win32.S","","ext/ffi_c/libffi/src/x86/win32_S.html","","\n<pre>-----------------------------------------------------------------------\nwin32.S - Copyright (c) 1996, ...</pre>\n"],["win64.S","","ext/ffi_c/libffi/src/x86/win64_S.html","","<p>#define LIBFFI_ASM #include &lt;fficonfig.h&gt; #include &lt;ffi.h&gt;\n\n<pre>Constants for ffi_call_win64</pre>\n<p>#define …\n"],["Makefile.am","","ext/ffi_c/libffi/testsuite/Makefile_am.html","","<p>## Process this file with automake to produce Makefile.in.\n<p>AUTOMAKE_OPTIONS = foreign dejagnu\n<p># Setup the …\n"],["Makefile.in","","ext/ffi_c/libffi/testsuite/Makefile_in.html","","<p># Makefile.in generated by automake 1.11.1 from Makefile.am. #\n@configure_input@\n<p># Copyright (C) 1994, …\n"],["default.exp","","ext/ffi_c/libffi/testsuite/config/default_exp.html","","<p>load_lib “standard.exp”\n"],["libffi-dg.exp","","ext/ffi_c/libffi/testsuite/lib/libffi-dg_exp.html","","<p>#   Copyright (C) 2003, 2005, 2008, 2009 Free Software Foundation, Inc.\n<p># This program is free software; …\n"],["libffi.exp","","ext/ffi_c/libffi/testsuite/lib/libffi_exp.html","","<p>#   Copyright (C) 2003, 2005, 2008, 2009, 2010, 2011 Free Software\nFoundation, Inc.\n<p># This program is …\n"],["target-libpath.exp","","ext/ffi_c/libffi/testsuite/lib/target-libpath_exp.html","","<p># Copyright (C) 2004, 2005, 2007 Free Software Foundation, Inc.\n<p># This program is free software; you can …\n"],["wrapper.exp","","ext/ffi_c/libffi/testsuite/lib/wrapper_exp.html","","<p>#   Copyright (C) 2004, 2007 Free Software Foundation, Inc.\n<p># This program is free software; you can redistribute …\n"],["call.exp","","ext/ffi_c/libffi/testsuite/libffi_call/call_exp.html","","<p># Copyright (C) 2003, 2006, 2009, 2010 Free Software Foundation, Inc.\n<p># This program is free software; …\n"],["special.exp","","ext/ffi_c/libffi/testsuite/libffi_special/special_exp.html","","<p># Copyright (C) 2003, 2006, 2009, 2010 Free Software Foundation, Inc.\n<p># This program is free software; …\n"],["texinfo.tex","","ext/ffi_c/libffi/texinfo_tex.html","","<p>% texinfo.tex – TeX macros to handle Texinfo files. % % Load plain if\nnecessary, i.e., if running under …\n"],["types.conf","","lib/ffi/platform/arm-linux/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/i386-cygwin/types_conf.html","","<p>rbx.platform.typedef.size_t = uint rbx.platform.typedef.ptrdiff_t = int\nrbx.platform.typedef.ssize_t …\n"],["types.conf","","lib/ffi/platform/i386-darwin/types_conf.html","","<p>rbx.platform.typedef.__int8_t = char rbx.platform.typedef.__uint8_t = uchar\nrbx.platform.typedef.__int16_t …\n"],["types.conf","","lib/ffi/platform/i386-freebsd/types_conf.html","","<p>rbx.platform.typedef.__int8_t = char rbx.platform.typedef.__uint8_t = uchar\nrbx.platform.typedef.__int16_t …\n"],["types.conf","","lib/ffi/platform/i386-gnu/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/i386-linux/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/i386-netbsd/types_conf.html","","<p>rbx.platform.typedef.__int8_t = char rbx.platform.typedef.__uint8_t = uchar\nrbx.platform.typedef.__int16_t …\n"],["types.conf","","lib/ffi/platform/i386-openbsd/types_conf.html","","<p>rbx.platform.typedef.__int8_t = char rbx.platform.typedef.__uint8_t = uchar\nrbx.platform.typedef.__int16_t …\n"],["types.conf","","lib/ffi/platform/i386-solaris/types_conf.html","","<p>rbx.platform.typedef.lock_t = uchar rbx.platform.typedef.int8_t = char\nrbx.platform.typedef.int16_t = …\n"],["types.conf","","lib/ffi/platform/i386-windows/types_conf.html","","<p>rbx.platform.typedef.__int8_t = char rbx.platform.typedef.__uint8_t = uchar\nrbx.platform.typedef.__int16_t …\n"],["types.conf","","lib/ffi/platform/ia64-linux/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/mips-linux/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/mipsel-linux/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/powerpc-aix/types_conf.html","","<p>rbx.platform.typedef.int8_t = char rbx.platform.typedef.int16_t = short\nrbx.platform.typedef.int32_t …\n"],["types.conf","","lib/ffi/platform/powerpc-darwin/types_conf.html","","<p>rbx.platform.typedef.__int8_t = char rbx.platform.typedef.__uint8_t = uchar\nrbx.platform.typedef.__int16_t …\n"],["types.conf","","lib/ffi/platform/powerpc-linux/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/s390-linux/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/s390x-linux/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/sparc-linux/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/sparc-solaris/types_conf.html","","<p>rbx.platform.typedef.lock_t = uchar rbx.platform.typedef.int8_t = char\nrbx.platform.typedef.int16_t = …\n"],["types.conf","","lib/ffi/platform/sparcv9-solaris/types_conf.html","","<p>rbx.platform.typedef.lock_t = uchar rbx.platform.typedef.int8_t = char\nrbx.platform.typedef.int16_t = …\n"],["types.conf","","lib/ffi/platform/x86_64-cygwin/types_conf.html","","<p>rbx.platform.typedef.size_t = uint64 rbx.platform.typedef.ptrdiff_t = int64\nrbx.platform.typedef.ssize_t …\n"],["types.conf","","lib/ffi/platform/x86_64-darwin/types_conf.html","","<p>rbx.platform.typedef.__int8_t = char rbx.platform.typedef.__uint8_t = uchar\nrbx.platform.typedef.__int16_t …\n"],["types.conf","","lib/ffi/platform/x86_64-freebsd/types_conf.html","","<p>rbx.platform.typedef.__int8_t = char rbx.platform.typedef.__uint8_t = uchar\nrbx.platform.typedef.__int16_t …\n"],["types.conf","","lib/ffi/platform/x86_64-linux/types_conf.html","","<p>rbx.platform.typedef.__u_char = uchar rbx.platform.typedef.__u_short =\nushort rbx.platform.typedef.__u_int …\n"],["types.conf","","lib/ffi/platform/x86_64-netbsd/types_conf.html","","<p>rbx.platform.typedef.__int8_t = char rbx.platform.typedef.__uint8_t = uchar\nrbx.platform.typedef.__int16_t …\n"],["types.conf","","lib/ffi/platform/x86_64-openbsd/types_conf.html","","<p>rbx.platform.typedef.__int8_t = char rbx.platform.typedef.__uint8_t = uchar\nrbx.platform.typedef.__int16_t …\n"],["types.conf","","lib/ffi/platform/x86_64-solaris/types_conf.html","","<p>rbx.platform.typedef.lock_t = uchar rbx.platform.typedef.int8_t = char\nrbx.platform.typedef.int16_t = …\n"],["types.conf","","lib/ffi/platform/x86_64-windows/types_conf.html","","<p>rbx.platform.typedef.size_t = ulong_long rbx.platform.typedef.ssize_t =\nlong_long rbx.platform.typedef.intptr_t …\n"]]}}