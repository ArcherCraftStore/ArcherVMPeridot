<?php
/**
 * @file
 * Code for the Open Atrium Buttons feature.
 */

include_once 'oa_buttons.features.inc';

/**
 * Implements hook_ctools_plugin_directory
 */
function oa_buttons_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oa_buttons_form_oa_section_node_form_alter(&$form, &$form_state, $form_id) {
  oa_buttons_node_overrides($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oa_buttons_form_oa_space_node_form_alter(&$form, &$form_state, $form_id) {
  oa_buttons_node_overrides($form, $form_state, $form_id);
}

/**
 * Provides override for node pages which implement sections and spaces.
 */
function oa_buttons_node_overrides(&$form, &$form_state, $form_id) {
  $node_type_options = oa_buttons_get_node_type_options();
  $form['field_oa_node_types'][$form['field_oa_node_types']['#language']]['#options'] = $node_type_options;
   $node_options = field_get_items('node', $form['#node'], 'field_oa_node_types', LANGUAGE_NONE);

  if (!empty($node_options)) {
    foreach ($node_options as $opt) {
      $node_options_defaults[] = $opt['value'];
    }
    $form['field_oa_node_types'][$form['field_oa_node_types']['#language']]['#default_value'] = $node_options_defaults;
  }

  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'oa_buttons') . '/oa_buttons.js',
    'type' => 'file',
  );
}

/**
 * Implements hook_oa_core_space_type_options().
 */
function oa_buttons_oa_core_space_type_options($term, $vocab_name) {
  $options = array(
    'node_options' => array(),
  );

  $node_types = field_get_items('taxonomy_term', $term, 'field_oa_node_types', LANGUAGE_NONE);
  if (!empty($node_types)) {
    foreach ($node_types as $option) {
      $options['node_options'][] = $option['value'];
    }
  }

  return $options;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oa_buttons_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $term = (object) $form['#term'];
  $vocab_name = $form['#vocabulary']->machine_name;

  if (in_array($vocab_name, array('space_type', 'section_type'))) {
    $node_options = field_get_items('taxonomy_term', $term, 'field_oa_node_types', LANGUAGE_NONE);

    $node_options_defaults = array();
    if (!empty($node_options)) {
      foreach ($node_options as $opt) {
        $node_options_defaults[] = $opt['value'];
      }
    }

    // Provide default node creation options.
    $node_type_options = oa_buttons_get_node_type_options();
    if (isset($form['field_oa_node_types'])) {
      $form['field_oa_node_types'][$form['field_oa_node_types']['#language']]['#options'] = $node_type_options;
      $form['field_oa_node_types'][$form['field_oa_node_types']['#language']]['#default_value'] = $node_options_defaults;
    }
  }
}

/**
 * Returns an option list of buttons in the node_add bundle..
 */
function oa_buttons_get_node_type_options() {
  $node_type_options = array();

  $node_type_options = array();
  $result = db_select('command_buttons', 'b')
    ->fields('b', array('name', 'title'));

  $result = $result->execute();

  while ($button = $result->fetchAssoc()) {
    $node_type_options[$button['name']] = $button['title'];
  }

  return $node_type_options;
}

/**
 * Determines which command buttons should be shown within the current context.
 */
function oa_buttons_get_command_buttons($node) {
  $buttons = array();
  $node_types = array_flip(node_type_get_names());
  _oa_buttons_get_space_command_buttons($node, $buttons);
  _oa_buttons_get_parent_command_buttons($node, $buttons);
  // look for node_add command buttons and check the 'create X content'
  // node_access dynamically so we don't show command buttons the user
  // cannot acccess
  foreach ($buttons as $button) {
    $entity_type = $button['value'];
    if (in_array($entity_type, $node_types) && !node_access('create', $entity_type)) {
      unset($buttons[$entity_type]);
    }
  }
  drupal_alter('oa_buttons_add_content', $buttons, $node);
  return $buttons;
}

/**
 * Get the command buttons allowed by a single node.
 */
function _oa_buttons_get_node_command_buttons($node, &$buttons) {
  $override_node_options = field_get_items('node', $node, 'field_oa_section_override');

  // Grab from the taxonomy term.
  if (empty($override_node_options[0]['value'])) {
    if ($node->type == 'oa_section') {
      $items = field_get_items('node', $node, 'field_oa_section');
    }
    else {
      $items = field_get_items('node', $node, 'field_oa_space_type');
    }

    if (!empty($items) && ($tid = reset($items)) && ($term = taxonomy_term_load($tid['tid']))) {
      $node_options = field_get_items('taxonomy_term', $term, 'field_oa_node_types');
    }
  }
  else {
    $node_options = field_get_items('node', $node, 'field_oa_node_types');
  }

  if (!empty($node_options)) {
    foreach ($node_options as $opt) {
      // There may be more than one node created using the same content type. If
      // we want to add each possibility to the command button list we need to
      // add the nid to the array key so they are unique.
      if (!isset($buttons[$opt['value'] . ':' . $node->nid])) {
        $buttons[$opt['value'] . ':' . $node->nid] = array(
          'value' => $opt['value'],
          'provider_type' => $node->type,
          'id' => $node->nid,
        );
      }
    }
  }
}

/**
 * Get the command buttons allowed by all parent groups of type oa_space.
 */
function _oa_buttons_get_parent_command_buttons($node, &$buttons) {
  if (!module_exists('og_subgroups')) {
    return;
  }

  $file = module_load_include('inc', 'og_subgroups', 'og_subgroups.common');

  // Now get options set from parent spaces.
  $parent_nids = og_subgroups_parents_load('node', $node->nid, FALSE);

  if (!empty($parent_nids)) {
    $spaces = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', 'oa_space')
      ->condition('n.nid', $parent_nids['node'], 'IN')
      ->execute()
      ->fetchAllAssoc('nid');

    if (!empty($spaces)) {
      $parent_groups = node_load_multiple(array_keys($spaces));

      if (!empty($parent_groups)) {
        foreach ($parent_groups as $parent) {
          // The urls for the allowed buttons are checked seperately,
          // but for now ensure they at least have view access on the parent
          // group.
          if ($parent->type == 'oa_space' && node_access('view', $node)) {
            _oa_buttons_get_node_command_buttons($parent, $buttons);
          }
        }
      }
    }
  }
}

/**
 * Get the command buttons allowed by a single space, as well as any sections
 * within it.
 */
function _oa_buttons_get_space_command_buttons($node, &$buttons) {
  _oa_buttons_get_node_command_buttons($node, $buttons);

  if ($node->type == 'oa_space') {
    $sections = oa_core_space_sections($node->nid);
    if (count($sections)) {
      // If we are within a section only show the buttons for this specific section.
      if ($section = oa_core_get_section_context()) {
        if (isset($sections[$section])) {
          $section_node = node_load($section);
          _oa_buttons_get_space_command_buttons($section_node, $buttons);
        }
      }
      else {
        // Otherwise show the buttons for all sections.
        foreach ($sections as $nid => $section) {
          $section_node = node_load($nid);
          _oa_buttons_get_space_command_buttons($section_node, $buttons);
        }
      }
    }
  }
}

/**
 * Implements hook_modules_enabled().
 */
function oa_buttons_modules_enabled($modules) {
  if (in_array('oa_buttons', $modules)) {
    oa_buttons_create_default_terms();
  }
}

/**
 * Create default terms for section and space type taxonomies.
 */
function oa_buttons_create_default_terms() {
  $terms = oa_buttons_get_default_terms();
  foreach ($terms as $term) {
    oa_buttons_create_term($term['taxonomy'], $term['name'], $term['description'], $term['node_options'], $term['layout']);
  }
}

/**
 * Return a structured array of default term data.
 */
function oa_buttons_get_default_terms() {
   $terms = array(
    array(
      'taxonomy' => 'space_type',
      'name' => 'Default',
      'description' => 'This is the default space layout with the Recent Activity stream in the main region.',
      'node_options' => array(),
      'layout' => 'node:oa_space:default'
    ),
    array(
      'taxonomy' => 'section_type',
      'name' => 'Default',
      'description' => 'This is the default section layout with the Recent Activity stream in the main region.',
      'node_options' => array(),
      'layout' => 'node:oa_section:default'
    ),
    array(
      'taxonomy' => 'section_type',
      'name' => 'Calendar Section',
      'description' => 'Allows users to create <em>Events</em> and view them on a calendar.',
      'node_options' => array(
        'oa_event',
      ),
      'layout' => 'node:oa_section:calendar_section'
    ),
    array(
      'taxonomy' => 'section_type',
      'name' => 'Discussion Section',
      'description' => 'Allows users to create <em>Discussion posts</em> and displays a list of topics.',
      'node_options' => array(
        'oa_discussion_post',
      ),
      'layout' => 'node:oa_section:oa_section_discussion'
    ),
    array(
      'taxonomy' => 'section_type',
      'name' => 'News Section',
      'description' => 'Allows users to create <em>Document pages</em> and displays a News article listing.',
      'node_options' => array(
        'oa_wiki_page',
      ),
      'layout' => 'node:oa_section:oa_section_news'
    ),
  );

  return $terms;
}

function _oa_buttons_perm_name($machine_name, $tid) {
  return 'use oa button ' . $machine_name . ' for ' . $tid . ' term';
}

function oa_buttons_og_permission() {
  $perms = array();
  if (module_exists('oa_subspaces') && ($vocabulary = oa_core_taxonomy_vocabulary('space_type')) && ($terms = taxonomy_get_tree($vocabulary->vid, 0))) {
    $perms['use any oa button space_type'] = array(
      'title' => t('Use any space type'),
      'description' => t('Users may use any of the available space types..'),
      'restrict access' => TRUE,
      'default role' => array(OG_ADMINISTRATOR_ROLE),
    );
    foreach ($terms as $term) {
      $perms[_oa_buttons_perm_name('space_type', $term->tid)] = array(
        'title' => t('Use @name space type', array('@name' => $term->name)),
        'description' => t('Users may select @name space type on create space form. This permission will be ignored if user can create space globally or if they can administer current group.', array('@name' => $term->name)),
        'restrict access' => TRUE,
        'default role' => array(OG_ADMINISTRATOR_ROLE),
      );
    }
  }
  return $perms;
}

/**
 * Create an individual taxonomy term within a section or space.
 *
 * @param $taxonomy
 *   The vocabulary machine name.
 * @param $name
 *   The human readable label of the term.
 * @param $description
 *   The human readable description of the term.
 * @param $node_options
 *   An array of node types which should be allowed within the section.
 * @param $layout
 *   The panelizer layout key to use for this section.
 */
function oa_buttons_create_term($taxonomy, $name, $description, $node_options, $layout, $update = FALSE) {

  $vocab = oa_core_taxonomy_vocabulary($taxonomy);
  // Make sure the Taxonomy is available.
  if (!$vocab) {
    features_revert(array(
      'oa_core' => array('taxonomy'),
      'oa_sections' => array('taxonomy'),
    ));
    drupal_static('taxonomy_vocabulary_get_names');
    $vocab = oa_core_taxonomy_vocabulary($taxonomy);
  }

  if (!empty($vocab) && !($term = current(taxonomy_get_term_by_name($name, $taxonomy))) || $update) {

    // Make sure the fields from oa_buttons are available.
    $field_info = field_info_instances('taxonomy_term', $taxonomy);
    if (empty($field_info['field_oa_section_layout']) || empty($field_info['field_oa_node_types'])) {
      features_revert(array(
        'oa_buttons' => array('field_base', 'field_instance'),
      ));
      field_info_cache_clear();
    }

    if ($term && $update) {
      $term->field_oa_section_layout[LANGUAGE_NONE][0]['value'] = $layout;
      $term->field_oa_node_types[LANGUAGE_NONE] = array();
    }
    else {
      $term = (object) array(
        'vid' => $vocab->vid,
        'name' => $name,
        'description' => $description,
        'format' => 'panopoly_wysiwyg_text',
        'field_oa_section_layout' => array(
          LANGUAGE_NONE => array(
            array('value' => $layout),
          ),
        ),
        'field_oa_node_types' => array(
          LANGUAGE_NONE => array(),
        ),
        'path' => array(
          'alias' => '',
          'pathauto' => '',
        ),
        'oa_button' => TRUE,
      );
    }

    if (!empty($node_options)) {
      foreach ($node_options as $type) {
        $term->field_oa_node_types[LANGUAGE_NONE][] = array('value' => $type);
      }
    }
    taxonomy_term_save($term);
  }
  return $term;
}

/**
 * Implements hook_node_insert().
 */
function oa_buttons_node_insert($node) {
  if ($node->type == 'oa_space' || $node->type == 'oa_section') {
    oa_buttons_clear_section_button_cache();
  }
}

/**
 * Implements hook_node_update().
 */
function oa_buttons_node_update($node) {
  if ($node->type == 'oa_space' || $node->type == 'oa_section') {
    oa_buttons_clear_section_button_cache();
  }
}

/**
 * Implements hook_og_membership_insert().
 */
function oa_buttons_og_membership_insert($og_membership) {
  if ($og_membership->entity_type == 'user') {
    oa_buttons_clear_section_button_cache();
  }
}

/**
 * Implements hook_og_membership_update().
 */
function oa_buttons_og_membership_update($og_membership) {
  if ($og_membership->entity_type == 'user') {
    oa_buttons_clear_section_button_cache();
  }
}

/**
 * Implements hook_og_membership_delete().
 */
function oa_buttons_og_membership_delete($og_membership) {
  if ($og_membership->entity_type == 'user') {
    oa_buttons_clear_section_button_cache();
  }
}

function oa_buttons_clear_section_button_cache($gid = NULL) {
  global $user;

  if (empty($gid)) {
    $context = og_context();

    if (!empty($context['gid'])) {
      $gid = $context['gid'];
    }
  }

  if (!empty($gid)) {
    $cache_key = 'oa_section_buttons:' . $context['gid'];
    cache_clear_all($cache_key, 'cache_oa_section_buttons', TRUE);

    if (module_exists('og_subgroups')) {
      // Clear button cache for any associated subgroups as well.
      $subgroups = og_subgroups_children_load('node', $gid, TRUE, FALSE);
      if (!empty($subgroups['node'])) {
        foreach ($subgroups['node'] as $nid) {
          $cache_key = 'oa_section_buttons:' . $nid;
          cache_clear_all($cache_key, 'cache_oa_section_buttons', TRUE);
        }
      }
    }
  }
}

/**
 * Implements hook_flush_caches().
 */
function oa_buttons_flush_caches() {
  return array('cache_oa_section_buttons');
}
