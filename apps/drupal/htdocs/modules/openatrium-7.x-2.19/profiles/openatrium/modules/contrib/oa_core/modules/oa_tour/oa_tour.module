<?php

/**
 * @file
 * Code for the Open Atrium Bootstrap Tour customizations.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function oa_tour_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_theme()
 */
function oa_tour_theme() {
  return array(
    'oa_tour_dropdown' => array(
      'template'  => 'oa-tour-dropdown',
      'path' => drupal_get_path('module', 'oa_tour') . '/templates',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add the "spaces" form field.
 */
function oa_tour_form_bootstrap_tour_form_alter(&$form, &$form_state, $form_id) {
  $spaces = node_load_multiple(array(), array('type' => 'oa_space', 'status' => 1));
  $options = array();
  foreach ($spaces as $space) {
    $options[$space->nid] = $space->title;
  }
  asort($options); // Sort alphabetically for the heck of it.

  $tour_name = arg(4);
  if (!empty($tour_name)) {
    $tour = bootstrap_tour_load($tour_name);
  }

  $form['spaces'] = array(
    '#type' => 'select',
    '#title' => t('Spaces'),
    '#description' => t('Which spaces should this tour be active in? Leave empty for all.'),
    '#multiple' => TRUE,
    '#options' => $options,
    '#default_value' => !empty($tour->spaces) ? explode(',', $tour->spaces) : '',
    '#weight' => 1,
  );
}

/**
 * Implements hook_bootstrap_tour_presave_alter().
 * Add the "spaces" field to it before saving.
 */
function oa_tour_bootstrap_tour_presave_alter(&$tour, &$vals) {
  if (!empty($vals['spaces'])) {
    $tour->spaces = implode(',', $vals['spaces']);
  }
}

/**
 * Implements hook_bootstrap_tour_alter().
 * Dig into steps with "firstnode/<nodetype>/<tourname>" paths and alter them so that they either point to the first
 * node of a specific type if one exists, or the node add form of that type if not.
 */
function oa_tour_bootstrap_tour_alter(&$tour) {
  if (empty($tour) || empty($tour->steps)) {
    return;
  }
  foreach ($tour->steps as $key => $step) {
    if (empty($step['path'])) {
      continue;
    }
    $path_parts = explode('/', $step['path']);
    if ($path_parts[0] == 'firstnode' && count($path_parts) > 1) {
      $node_type = $path_parts[1];
      $nid = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('type', $node_type)
        ->orderBy('nid', 'DESC')
        ->range(0,1)
        ->execute()
        ->fetchField();
      if (empty($nid)) {
        // No nodes exist yet so let's send them to the node add form.
        $tour->steps[$key]['path'] = 'node/add/' . str_replace('_', '-', $node_type) . '?nexttour=' . $tour->name;
        if (!empty($path_parts[2])) {
          // If the URL has a 3rd part, that's the name of the tour to run on the node add form.
          $tour->steps[$key]['path'] .= '&tour=' . $path_parts[2];
        }
      } else {
        // A node does exist, so go ahead and make that the next step.
        $tour->steps[$key]['path'] = drupal_get_path_alias('node/' . $nid);
        if (!empty($_SESSION['nexttour']) && $_SESSION['nexttour'] == $tour->name) {
          for ($i = 0; $i < $key; $i++) {
            unset($tour->steps[$i]);
          }
          $tour->steps = array_values($tour->steps);
        }
      }
    }
  }
}

/**
 * Implementation of hook_form_FORM_BASE_ID_alter().
 * Add the nexttour parameter as a hidden form field so that we can use it in the submit
 * callback to resume the previous tour on the newly created node's page.
 */
function oa_tour_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($_GET['nexttour'])) {
    $form['nexttour'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['nexttour'],
    );
  }
}

/**
 * Implementation of hook_node_insert().
 * Fetch the next tour to run from the form fields and then run it.
 */
function oa_tour_node_insert($node) {
  if (!empty($node->nexttour)) {
    $_SESSION['nexttour'] = $node->nexttour;
  }
}
