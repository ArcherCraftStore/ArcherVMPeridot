<?php
/**
 * @file
 * Code for the Open Atrium Media feature.
 */

include_once 'oa_media.features.inc';
/**
 * @file
 */

/**
 * Override theme function for Media Colorbox
 * to fix image resizing
 * copied from http://drupal.org/node/1514406
 */
function oa_media_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['media_colorbox']['function'])) {
    $theme_registry['media_colorbox']['function'] = 'oa_media_media_colorbox';
  }
}



/**
 * Implements hook_field_formatter_info().
 */
function oa_media_field_formatter_info() {
  return array(
   'oa_media_formatter' => array(
      'label' => t('First Image'),
      'field types' => array('file'),
      'settings'  => array(
        'image_style' => 'thumbnail',
      ),
    )
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function oa_media_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  // Grab the instance settings for this view mode.
  $display = $instance['display'][$view_mode];
  // Grab configuration options for this formatter.
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'oa_media_formatter') {
    // Build options array.
    $styles = image_styles();
    $style_options = array();
    foreach ($styles as $style) {
      $style_options[$style['name']] = $style['name'];
    }

    $element['image_style'] = array(
      '#type' => 'select',
      '#title' => t('Image Style'),
      '#description' => t('Select the image style to use for this formatter'),
      '#default_value' => $settings['image_style'],
      '#options' => $style_options,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function oa_media_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  if ($display['type'] == 'oa_media_formatter') {
    foreach ($items as $delta => $item) {
      if ($item['type'] == 'image') {
        $settings = $display['settings'];
        $image = theme('image_style', array('style_name' => $settings['image_style'], 'path' => $item['uri']));

        $element[0] = array(
          '#markup' => '<div class="oa-media-first-thumbnail">' . $image . "</div>",
        );

        break;
      }
    }
  }

  return $element;
}

function oa_media_media_colorbox($variables) {
  $entity_id = $variables['entity_id'];
  $file_id = $variables['file_id'];
  $field = $variables['field'];
  $field_name = isset($field['field_name']) ? $field['field_name'] : '';
  $settings = $variables['display_settings'];

//switch to figure out where caption should come from
  switch ($settings['colorbox_caption']) {
    case 'title':
      $caption = $variables['title'];
      break;
    case 'mediafield':
      $caption = $variables['media_colorbox_caption'];
      break;
    default:
      $caption = '';
  }

  // Shorten the caption for the example styles or when caption shortening is active.
  $colorbox_style = variable_get('colorbox_style', 'default');
  $trim_length = variable_get('colorbox_caption_trim_length', 75);
  if ((variable_get('colorbox_caption_trim', 0)) && (drupal_strlen($caption) > $trim_length)) {
    $caption = drupal_substr($caption, 0, $trim_length - 5) . '...';
  }

  // Build the gallery id.
  switch ($settings['colorbox_gallery']) {
    case 'post':
      $gallery_id = 'gallery-' . $entity_id;
      break;
    case 'page':
      $gallery_id = 'gallery-all';
      break;
    case 'field_post':
      $gallery_id = 'gallery-' . $entity_id . '-' . $field_name;
      break;
    case 'field_page':
      $gallery_id = 'gallery-' . $field_name;
      break;
    case 'custom':
      $gallery_id = $settings['colorbox_gallery_custom'];
      break;
    default:
      $gallery_id = '';
  }

  //load file and render for select view mode
  if ($file_id != NULL) {
    $file = file_load($file_id);
    $fview = file_view($file, $settings['file_view_mode'], $variables['langcode']);
    if ($file->type == 'image') {
      $variables['path'] = file_create_url($file->uri);
    }
    $text = drupal_render($fview);
  }
  elseif (isset($variables['item'])) {
    $text = drupal_render($variables['item']);
  }
  //strip anchor tags as rendered output will be wrapped by another anchor tag
  //fix for issue #1477662
  $stripped_text = media_colorbox_strip_only($text, 'a');
  $output = theme('link', array(
    //'text' => drupal_render($variables['item']),
    'text' => $stripped_text,
    'path' => $variables['path'],
    'options' => array(
      'html' => TRUE,
      'attributes' => array(
        'title' => $caption,
        'class' => 'media-colorbox ' . $variables['item_class'],
        'style' => $variables['item_style'],
        'rel' => $gallery_id,
        'data-mediaColorboxFixedWidth' => $settings['fixed_width'],
        'data-mediaColorboxFixedHeight' => $settings['fixed_height'],
        'data-mediaColorboxAudioPlaylist' => $settings['audio_playlist'],
      ),
    ),
  ));

  return $output;
}
